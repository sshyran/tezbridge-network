{"version":3,"sources":["types.js","util.js","PsddFKi3/api.js","index.js"],"names":["safeProp","x","props","result","prop","undefined","curr","shift","Object","Array","prop_index","parseInt","isNaN","checkProps","obj","cursor","filterHashUrl","indexOf","start","end","slice","length","OpStep","main_fn","next_nodes","args","apply","run","Promise","then","catch","err","Gets","fetch","path","sub_path","head","header","address","hash_url","hash","contract_bytes","Posts","submit","data_json","type_json","param","head_hash","ops","branch","contents","protocol","signature","signed_op","Mixed","op_params","counter","source","counter_prev","manager_key","push","params","reveal","public_key","manager_pkh","forEach","item","op","origination","assign","transaction","destination","kind","toString","forge_operation","operation_hex","basic","op_param","makeOperationBytes","fee","gas_limit","storage_limit","amount","managerPubkey","balance","TezBridgeNetwork","RPCFn","url","data","method","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify","APIs","PsddFKi3","PsddFKi3_API","host","get","call","post","mixed"],"mappings":";AAoCC,aA1BM,SAASA,EAASC,GAAgBC,IACnCC,IAEAC,EAFAD,OAASE,EAGTC,EAAOL,EAJ4BC,EAAAA,UAAAA,OAAAA,EAAgC,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAhCA,EAAgC,EAAA,GAAA,UAAA,GAKhE,UAEQG,KADbD,EAAOF,EAAMK,UAITD,GAAAA,aAAgBE,UAAYF,aAAgBG,OAC9CN,EAASG,EAAKF,GACdE,EAAOA,EAAKF,OACP,CAAA,KAAIE,aAAgBG,OAQlBJ,OAPDK,IAAAA,EAAaC,SAASP,GACxBQ,GAAAA,MAAMF,GACR,OAEFP,EAASG,EAAKI,GACdJ,EAAOA,EAAKI,GAMTP,OAAAA,EACR,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA;;ACYE,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9CI,SAASU,EAAWC,GAAiBZ,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAuB,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAvBA,EAAuB,EAAA,GAAA,UAAA,GAG1DE,IAFHA,IAAAA,EAAOF,EAAMK,QACbQ,EAASD,OACGT,IAATD,GAAoB,CACrB,KAAEA,KAAQW,SAA4BV,IAAjBU,EAAOX,GAC9B,KAAmBA,aAAAA,OAAAA,EAAnB,yBAGFW,EAASA,EADTX,EAAOF,EAAMK,UAKV,SAASS,EAAcf,GACxBA,IAAoB,IAApBA,EAAEgB,QAAQ,KACZ,KAAM,+FAEFC,IAAAA,EAAiB,MAATjB,EAAE,GAAa,EAAI,EAC3BkB,EAAsB,MAAhBlB,EAAEmB,OAAO,IAAc,EAAInB,EAAEoB,OAElCpB,OAAAA,EAAEmB,MAAMF,EAAOC,GA2BrB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,QAAA,cAAA,EAAA,QAAA,YAAA,EAxBUG,IAAAA,EAwBV,WApBWC,SAAAA,EAAAA,GAAqD,EAAA,KAAA,GAC1DA,KAAAA,QAAUA,EADoBC,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAA4B,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAA5BA,EAA4B,EAAA,GAAA,UAAA,GAE1DA,KAAAA,WAAaA,EAkBnB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,MAfyB,MAAA,WAAnBC,IAAmB,IAAA,EAAA,KAAnBA,EAAAA,UAAAA,OAAAA,EAAmB,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAnBA,EAAmB,GAAA,UAAA,GAClBtB,IAAAA,EAAS,KAAKoB,QAAQG,MAAM,KAAMD,GACpC,MAAkB,kBAAXtB,EACLA,EACK,KAAKqB,WAAW,IAAM,KAAKA,WAAW,GAAGG,MAEzC,KAAKH,WAAW,IAAM,KAAKA,WAAW,GAAGG,MAGhDxB,aAAkByB,QACbzB,EAAO0B,KAAK,SAAA5B,GAAK,OAAA,EAAKuB,WAAW,IAAM,EAAKA,WAAW,GAAGG,IAAI1B,KACpE6B,MAAM,SAAAC,GACyBA,KAAAA,wBAAAA,OAAAA,UAH9B5B,MAML,EAAA,GAAA,QAAA,OAAA;;ACwLY,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,QAAA,MAAA,QAAA,MAAA,QAAA,UAAA,EArOf,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,WAoOe,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,MAAA,GAAA,YAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,QAAA,QAAA,GAAA,KAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,GAAA,OAAA,MAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAjOF6B,IAAAA,EAiOE,WA9NDC,SAAAA,EAAAA,GAAoB,EAAA,KAAA,GACzBA,KAAAA,MAAQA,EA6NF,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SA3NNC,MAAAA,SAAAA,GACE,OAAA,KAAKD,MAAMC,KA0NP,CAAA,IAAA,OAxNRC,MAAAA,SAAAA,GACI,OAAA,KAAKF,MAAkCE,4BAAAA,OAAAA,GAAY,OAuN/C,CAAA,IAAA,OArNN,MAAA,WACE,OAAA,KAAKC,KAAK,UAoNN,CAAA,IAAA,SAlNJ,MAAA,WACA,OAAA,KAAKA,KAAK,YAiNN,CAAA,IAAA,WA/MF,MAAA,WACF,OAAA,KAAKC,SAASR,KAAK,SAAA5B,GAAK,OAAA,EAASA,EAAAA,UAAAA,EAAG,gBA8MhC,CAAA,IAAA,cA5MC,MAAA,WACL,OAAA,KAAKoC,SAASR,KAAK,SAAA5B,GAAK,OAAA,EAASA,EAAAA,UAAAA,EAAG,mBA2MhC,CAAA,IAAA,UAzMLqC,MAAAA,SAAAA,GACC,OAAA,KAAKL,MAAoDK,8CAAAA,OAAAA,EAAhE,eAwMW,CAAA,IAAA,WAtMJA,MAAAA,SAAAA,GACA,OAAA,KAAKL,MAAoDK,8CAAAA,OAAAA,MAqMrD,CAAA,IAAA,iBAnMEC,MAAAA,SAAAA,EAAmBJ,GAC1BK,IAAAA,GAAO,EAAcD,EAAAA,eAAAA,GACpB,OAAA,KAAKN,MAA+EO,yEAAAA,OAAAA,GAAOL,OAAAA,GAAY,OAiMnG,CAAA,IAAA,gBA/LCI,MAAAA,SAAAA,GACL,OAAA,KAAKE,eAAeF,EAAU,mBA8L1B,CAAA,IAAA,gBA5LCA,MAAAA,SAAAA,GACL,OAAA,KAAKE,eAAeF,EAAU,cA2L1B,CAAA,IAAA,cAzLDD,MAAAA,SAAAA,GACH,OAAA,KAAKL,MAAoDK,8CAAAA,OAAAA,EAAhE,mBAwLW,CAAA,IAAA,UAtLLA,MAAAA,SAAAA,GACC,OAAA,KAAKL,MAAoDK,8CAAAA,OAAAA,EAAhE,iBAqLW,EAAA,GAAA,QAAA,KAAA,EAhLFI,IAAAA,EAgLE,WA7KDC,SAAAA,EAAAA,GAAsB,EAAA,KAAA,GAC3BA,KAAAA,OAASA,EA4KH,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YAzKHC,MAAAA,SAAAA,EAAqBC,GACvBC,IAAAA,EAAQ,CAASF,KAAAA,EAAiBC,KAAAA,EAAkB,IAAA,UACnD,OAAA,KAAKF,OAA6DG,qDAAAA,GAC7DjB,KAAK,SAAA5B,GAAK,OAAA,EAASA,EAAAA,UAAAA,EAAG,cAsKvB,CAAA,IAAA,kBAnKG8C,MAAAA,SAAAA,EAAoBC,GAC5BF,IAAAA,EAAQ,CACZG,OAAQF,EACRG,SAAUF,GAEL,OAAA,KAAKL,OAA4DG,oDAAAA,KA8J7D,CAAA,IAAA,qBA3JMC,MAAAA,SAAAA,EAAoBC,EAAeG,EAAmBC,GACjEN,IAAAA,EAAQ,CACZG,OAAQF,EACRG,SAAUF,EACVG,SAAAA,EACAC,UAAAA,GAEK,OAAA,KAAKT,OAA+D,uDAAA,CAACG,MAoJjE,CAAA,IAAA,mBAjJIO,MAAAA,SAAAA,GACR,OAAA,KAAKV,OAAO,uBAAwBU,OAgJhC,EAAA,GAAA,QAAA,MAAA,EA3IFC,IAAAA,EA2IE,WAvIDrB,SAAAA,EAAAA,EAAaU,GAAe,EAAA,KAAA,GACjCV,KAAAA,MAAQA,EACRU,KAAAA,OAASA,EAqIH,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,qBAAA,MAAA,WAAA,IAAA,EAAA,EAvFYG,mBAAAA,KAAAA,SAAAA,EAAAA,EAGtBS,GAoFU,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EA/EgB,OADrBP,EAAM,GAgFD,EAAA,KAAA,EA/EgB,KAAKf,MAAMuB,QAAQV,EAAMW,QA+EzC,KAAA,EA9Ee,OADpBC,EAAAA,EAAAA,KA+EK,EAAA,KAAA,EA9Ee,KAAKzB,MAAM0B,YAAYb,EAAMW,QA8E5C,KAAA,EA5EP,GAFEE,EAAAA,EAAAA,KAEsB,iBAAjBD,EAAiB,CA4EjB,EAAA,KAAA,EAAA,MA3EH,KAAA,kBA2EG,KAAA,EAjEP,GARAF,EAAU7C,SAAS+C,GAAgB,EAAI,IAEtC,EAASC,EAAAA,UAAAA,EAAa,SACzBX,EAAIY,KAAKN,EAAMO,OAAOC,OAAOhB,EAAMW,OAAQX,EAAMiB,WAAYP,IAC7DA,EAAU7C,SAAS6C,GAAW,EAAI,IAIT,iBADrBQ,GAAc,EAASL,EAAAA,UAAAA,EAAa,YACf,CAiEhB,EAAA,KAAA,GAAA,MAhEH,KAAA,kCAgEG,KAAA,GAzCa,OArBxBJ,EAAUU,QAAQ,SAAAC,GACVC,IAAAA,EAAK,CACTC,YAAa5D,OAAO6D,OAClB,GACAf,EAAMO,OAAOO,YAAYtB,EAAMW,OAAQO,EAAaR,GACpDU,GAEFI,YAAa9D,OAAO6D,OAClB,GACAf,EAAMO,OAAOS,YAAYxB,EAAMW,OAAQS,EAAKK,aAAe,GAAIf,GAC/DU,IAEFA,EAAKM,MAEH,IAACL,EACH,KAAmBD,aAAAA,OAAAA,EAAKM,KAAxB,2BAEFxB,EAAIY,KAAKO,GACTX,EAAU7C,SAAS6C,GAAW,EAAI,KA4CzB,EAAA,KAAA,GAzCa,KAAKvB,MAAMO,OAyCxB,KAAA,GAvCL,GAAqB,iBAFrBO,EAAAA,EAAAA,MAEqB,CAuChB,EAAA,KAAA,GAAA,MAtCiCA,KAAAA,oCAAAA,OAAAA,EAAU0B,YAsC3C,KAAA,GApCiB,OAoCjB,EAAA,KAAA,GApCiB,KAAK9B,OAAO+B,gBAAgB3B,EAAWC,GAoCxD,KAAA,GAnCY,OADjB2B,EAAAA,EAAAA,KAoCK,EAAA,KAAA,GAnCY,KAAK1C,MAAMkB,WAmCvB,KAAA,GAjCJ,OAFDA,EAAAA,EAAAA,KAEC,EAAA,OAAA,SAAA,CACLA,SAAAA,EACAwB,cAAAA,EACA1B,OAAQF,EACRG,SAAUF,IA6BD,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,SAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,MAAA,KAAA,YAAA,IAAA,CAAA,IAAA,uBAAA,MAAA,WAAA,IAAA,EAAA,EAzBc4B,mBAAAA,KAAAA,SAAAA,EAAAA,EAGxBC,GAsBU,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EArBJ,OAAA,EAAA,OAAA,SAAA,KAAKC,mBAAmB,CAC7BrB,OAAQmB,EAAMnB,OACdM,WAAYa,EAAMb,YACjB,CAACvD,OAAO6D,OAAO,CAChBG,KAAM,eACLK,MAgBQ,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,SAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,MAAA,KAAA,YAAA,IAAA,CAAA,IAAA,uBAAA,MAAA,WAAA,IAAA,EAAA,EAbcD,mBAAAA,KAAAA,SAAAA,EAAAA,EAGxBC,GAUU,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EATJ,OAAA,EAAA,OAAA,SAAA,KAAKC,mBAAmB,CAC7BrB,OAAQmB,EAAMnB,OACdM,WAAYa,EAAMb,YACjB,CAACvD,OAAO6D,OAAO,CAChBG,KAAM,eACLK,MAIQ,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,EAAA,SAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,MAAA,KAAA,YAAA,MAAA,EAAA,GAAA,QAAA,MAAA,EA3IFvB,EAAAA,EASK,SAAA,CACdQ,OAAOL,SAAAA,EAAgBM,EAAoBP,GAClC,MAAA,CACLgB,KAAM,SACNf,OAAAA,EACAsB,IAAK,OACLC,UAAW,QACXC,cAAe,IACflB,WAAAA,EACAP,QAAAA,IAGJc,YAAYb,SAAAA,EAAgBc,EAAqBf,GACxC,MAAA,CACLgB,KAAM,cACNf,OAAAA,EACAsB,IAAK,SACLC,UAAW,SACXC,cAAe,QACfC,OAAQ,IACR1B,QAAAA,EACAe,YAAAA,IAIJH,YAAYX,SAAAA,EAAgBE,EAAqBH,GACxC,MAAA,CACLgB,KAAM,cACNf,OAAAA,EACAsB,IAAK,SACLvB,QAAAA,EACAwB,UAAW,SACXC,cAAe,QACfE,cAAexB,EACfyB,QAAS,QAgGF,IAAA,EAAA,CAAEpD,KAAAA,EAAMU,MAAAA,EAAOY,MAAAA,GAAf,QAAA,QAAA;;AC/GA+B,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,QAAAA,QAAAA,sBAAAA,EAtDf,IAAA,EAAA,EAAA,QAAA,mBAsDeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAvHf,IAAMC,EAEK,SAACC,EAAKC,EAAMC,GACV,OAAA,IAAI7D,QAAiB,SAAC8D,EAASC,GAC9BC,IAAAA,EAAM,IAAIC,eAChBD,EAAIE,iBAAiB,OAAQ,SAACC,GACT,MAAfH,EAAII,OACNN,EAAQO,KAAKC,MAAMN,EAAIO,eAEvBR,EAAOC,EAAIO,gBAEfP,EAAIE,iBAAiB,QAASH,GAC9BC,EAAIE,iBAAiB,QAASH,GAC9BC,EAAIQ,KAAKX,EAAQF,GACF,SAAXE,GACFG,EAAIS,iBAAiB,eAAgB,oBAEvCT,EAAIU,KAAKL,KAAKM,UAAUf,OAmD1BgB,EAAO,CACXC,SAAUC,EAAAA,SAGCrB,EA+CEA,WAxCDxB,SAAAA,EAAAA,GAGT,IAAA,EAAA,KACG,GADH,EAAA,KAAA,IACIA,EAAO8C,KACV,KAAM,gCAEHA,KAAAA,KAAO9C,EAAO8C,KACdrB,KAAAA,MAAQA,EAEPnC,IAAAA,EAAWU,EAAOV,UAAY,WAEhC,KAAEA,KAAYqD,GACErD,KAAAA,YAAAA,OAAAA,EAAlB,+BAGGlB,KAAAA,MAAQ,IAAIuE,EAAKrD,GAAUnB,KAAK,SAACuD,EAAKC,GAAS,OAAA,EAAKoB,IAAIC,KAAK,EAAMtB,EAAKC,KACxE7C,KAAAA,OAAS,IAAI6D,EAAKrD,GAAUT,MAAM,SAAC6C,EAAKC,GAAS,OAAA,EAAKsB,KAAKD,KAAK,EAAMtB,EAAKC,KAC3EuB,KAAAA,MAAQ,IAAIP,EAAKrD,GAAUG,MAAM,KAAKrB,MAAO,KAAKU,QAsB5C0C,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,cAnBDlC,MAAAA,SAAAA,GAAmB,IAAA,EAAA,KACzB,KAAEA,KAAYqD,GACErD,KAAAA,YAAAA,OAAAA,EAAlB,+BAGGlB,KAAAA,MAAQ,IAAIuE,EAAKrD,GAAUnB,KAAK,SAACuD,EAAKC,GAAS,OAAA,EAAKoB,IAAIC,KAAK,EAAMtB,EAAKC,KACxE7C,KAAAA,OAAS,IAAI6D,EAAKrD,GAAUT,MAAM,SAAC6C,EAAKC,GAAS,OAAA,EAAKsB,KAAKD,KAAK,EAAMtB,EAAKC,KAC3EuB,KAAAA,MAAQ,IAAIP,EAAKrD,GAAUG,MAAM,KAAKrB,MAAO,KAAKU,UAY5C0C,CAAAA,IAAAA,MATTE,MAAAA,SAAAA,EAAaC,GACR,OAAA,KAAKF,MAAM,KAAKqB,KAAOpB,EAAKC,EAAM,SAQ9BH,CAAAA,IAAAA,OALRE,MAAAA,SAAAA,EAAaC,GACT,OAAA,KAAKF,MAAM,KAAKqB,KAAOpB,EAAKC,EAAM,YAI9BH,EAAAA,GAAAA,QAAAA,iBAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA","file":"browser.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nexport type TezJSON =\n| number\n| string\n| boolean\n| void\n| {[string]: TezJSON}\n| Array<TezJSON>\n\nexport function safeProp(x : TezJSON, ...props : Array<string | number>) {\n  let result = undefined\n\n  let prop\n  let curr = x\n  while (true) {\n    prop = props.shift()\n    if (prop === undefined)\n      break\n\n    if (curr instanceof Object && !(curr instanceof Array)) {\n      result = curr[prop]\n      curr = curr[prop]\n    } else if (curr instanceof Array) {\n      const prop_index = parseInt(prop)\n      if (isNaN(prop_index))\n        return undefined\n\n      result = curr[prop_index]\n      curr = curr[prop_index]\n    } else {\n      return undefined\n    }\n  }\n\n  return result\n}\n\nexport type RPCFunc = (url: string, data?: TezJSON, method: 'POST' | 'GET') => Promise<TezJSON>\nexport type GetRPCFunc = (url: string, data?: TezJSON) => Promise<TezJSON>\nexport type PostRPCFunc = (url: string, data: TezJSON) => Promise<TezJSON>\n","// @flow\n\nexport function checkProps(obj : Object, ...props : Array<string>) {\n  let prop = props.shift()\n  let cursor = obj\n  while (prop !== undefined) {\n    if (!(prop in cursor) || cursor[prop] === undefined)\n      throw `Property: ${prop} is not in the object`\n\n    prop = props.shift()\n    cursor = cursor[prop]\n  }\n}\n\nexport function filterHashUrl(x : string) {\n  if (x.indexOf('/') === -1)\n    throw \"The input hash_url should be in this format: `xx/xx/xx/xx/xx/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\"\n\n  const start = x[0] === '/' ? 1 : 0\n  const end = x.slice(-1) === '/' ? -1 : x.length\n\n  return x.slice(start, end)\n}\n\nexport class OpStep {\n  main_fn: any => any\n  next_nodes: Array<OpStep>\n\n  constructor(main_fn : any => any, ...next_nodes : Array<OpStep>) {\n    this.main_fn = main_fn\n    this.next_nodes = next_nodes\n  }\n\n  run(...args : Array<any>) {\n    const result = this.main_fn.apply(this, args)\n    if (typeof result === 'boolean') {\n      if (result) \n        return this.next_nodes[0] && this.next_nodes[0].run()\n      else\n        return this.next_nodes[1] && this.next_nodes[1].run()\n    }\n\n    if (result instanceof Promise) {\n      return result.then(x => this.next_nodes[0] && this.next_nodes[0].run(x))\n      .catch(err => {\n        throw `OpStep error caught: ${err}`\n      })\n    }\n  }\n}","// @flow\n\nimport type { GetRPCFunc, PostRPCFunc, TezJSON } from '../types'\nimport { safeProp } from '../types'\nimport { checkProps, filterHashUrl, OpStep } from '../util'\n\n\nexport class Gets {\n  fetch : GetRPCFunc\n\n  constructor(fetch : GetRPCFunc) {\n    this.fetch = fetch\n  }\n  custom(path : string) {\n    return this.fetch(path)\n  }\n  head(sub_path? : string) {\n    return this.fetch(`/chains/main/blocks/head/${sub_path || ''}`)\n  }\n  hash() {\n    return this.head('hash')\n  }\n  header() {\n    return this.head('header')\n  }\n  protocol() {\n    return this.header().then(x => safeProp(x, 'protocol'))\n  }\n  predecessor() {\n    return this.header().then(x => safeProp(x, 'predecessor'))\n  }\n  balance(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/delegates/${address}/balance`)\n  }\n  contract(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}`)\n  }\n  contract_bytes(hash_url : string, sub_path? : string) {\n    const hash = filterHashUrl(hash_url)\n    return this.fetch(`/chains/main/blocks/head/context/raw/bytes/contracts/index/originated/${hash}${sub_path || ''}`)\n  }\n  storage_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/data/storage')\n  }\n  big_map_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/big_map')\n  }\n  manager_key(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/manager_key`)\n  }\n  counter(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/counter`)\n  }\n\n}\n\nexport class Posts {\n  submit : PostRPCFunc\n\n  constructor(submit : PostRPCFunc) {\n    this.submit = submit\n  }\n\n  pack_data(data_json : TezJSON, type_json : TezJSON) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.submit(`/chains/main/blocks/head/helpers/scripts/pack_data`, param)\n               .then(x => safeProp(x, 'packed'))\n  }\n\n  forge_operation(head_hash : string, ops : TezJSON) {\n    const param = {\n      branch: head_hash,\n      contents: ops\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/forge/operations`, param)\n  }\n\n  preapply_operation(head_hash : string, ops : TezJSON, protocol : string, signature : string) {\n    const param = {\n      branch: head_hash,\n      contents: ops,\n      protocol,\n      signature\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/preapply/operations`, [param])\n  }\n\n  inject_operation(signed_op : string) {\n    return this.submit('/injection/operation', signed_op)\n  }\n}\n\n\nexport class Mixed {\n  fetch: Gets\n  submit: Posts\n\n  constructor(fetch: Gets, submit: Posts) {\n    this.fetch = fetch\n    this.submit = submit\n  }\n\n  static params = {\n    reveal(source: string, public_key: string, counter: string) {\n      return {\n        kind: 'reveal',\n        source,\n        fee: '1300',\n        gas_limit: '10000',\n        storage_limit: '0',\n        public_key,\n        counter\n      }\n    },\n    transaction(source: string, destination: string, counter: string) {\n      return {\n        kind: 'transaction',\n        source,\n        fee: '400000',\n        gas_limit: '400000',\n        storage_limit: '60000',\n        amount: '0',\n        counter,\n        destination,\n        // parameters?: $micheline.michelson_v1.expression\n      }\n    },\n    origination(source: string, manager_key: string, counter: string) {\n      return {\n        kind: 'origination',\n        source,\n        fee: '400000',\n        counter,\n        gas_limit: '400000',\n        storage_limit: '60000',\n        managerPubkey: manager_key,\n        balance: '0',\n        // \"spendable\"?: boolean,\n        // \"delegatable\"?: boolean,\n        // \"delegate\"?: $Signature.Public_key_hash,\n        // \"script\"?: $scripted.contracts\n      }\n    }\n  }\n\n  async makeOperationBytes(param: {\n    source : string,\n    public_key: string\n  }, op_params: Array<{\n    kind : 'origination' | 'transaction',\n    destination? : string\n  }>) {\n    const ops = []\n    const counter_prev = await this.fetch.counter(param.source)\n    const manager_key = await this.fetch.manager_key(param.source)\n\n    if (typeof counter_prev !== 'string')\n      throw 'Invalid counter'\n\n    let counter = parseInt(counter_prev) + 1 + ''\n\n    if (!safeProp(manager_key, 'key')) {\n      ops.push(Mixed.params.reveal(param.source, param.public_key, counter))\n      counter = parseInt(counter) + 1 + ''\n    }\n\n    const manager_pkh = safeProp(manager_key, 'manager')\n    if (typeof manager_pkh !== 'string')\n      throw 'Invalid manager public key hash'\n\n    op_params.forEach(item => {\n      const op = {\n        origination: Object.assign(\n          {},\n          Mixed.params.origination(param.source, manager_pkh, counter),\n          item\n        ),\n        transaction: Object.assign(\n          {},\n          Mixed.params.transaction(param.source, item.destination || '', counter),\n          item\n        )\n      }[item.kind]\n\n      if (!op)\n        throw `Invalid t(${item.kind}) in makeOperationBytes`\n\n      ops.push(op)\n      counter = parseInt(counter) + 1 + ''\n    })\n\n    const head_hash = await this.fetch.hash()\n\n    if (!(typeof head_hash === 'string'))\n      throw `Error type for head_hash result: ${head_hash.toString()}`\n\n    const operation_hex = await this.submit.forge_operation(head_hash, ops)\n    const protocol = await this.fetch.protocol()\n\n    return {\n      protocol,\n      operation_hex,\n      branch: head_hash,\n      contents: ops\n    }\n  }\n\n  async makeOriginationBytes(basic : {\n    source : string,\n    public_key: string\n  }, op_param : Object) {\n    return this.makeOperationBytes({\n      source: basic.source,\n      public_key: basic.public_key\n    }, [Object.assign({\n      kind: 'origination'\n    }, op_param)])\n  }\n\n  async makeTransactionBytes(basic : {\n    source : string,\n    public_key: string\n  }, op_param : Object) {\n    return this.makeOperationBytes({\n      source: basic.source,\n      public_key: basic.public_key\n    }, [Object.assign({\n      kind: 'transaction'\n    }, op_param)])\n  }\n}\n\nexport default { Gets, Posts, Mixed }","// @flow\n\nconst RPCFn = (() => {\n  if (process.env.NODE_ENV === 'browser') {\n    return (url, data, method) => {\n      return new Promise<TezJSON>((resolve, reject) => {\n        const req = new XMLHttpRequest()\n        req.addEventListener('load', (pe: ProgressEvent) => {\n          if (req.status === 200)\n            resolve(JSON.parse(req.responseText))\n          else\n            reject(req.responseText)\n        })\n        req.addEventListener('error', reject)\n        req.addEventListener('abort', reject)\n        req.open(method, url)\n        if (method === 'POST') {\n          req.setRequestHeader('Content-Type', 'application/json')\n        }\n        req.send(JSON.stringify(data))\n      })\n    }\n  } else {\n    const https = require('https')\n    const url = require('url')\n    return (raw_url: string, data?: TezJSON, method: 'POST' | 'GET') => {\n      return new Promise<TezJSON>((resolve, reject) => {\n        const parsed_url = url.parse(raw_url)\n        const options = {\n          hostname: parsed_url.hostname,\n          port: parsed_url.port,\n          path: parsed_url.path,\n          method,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n\n        const req = https.request(options, (res) => {\n          let data = ''\n          res.on('data', (d) => {\n            data += d.toString()\n          })\n\n          res.on('end', () => {\n            try {\n              resolve(JSON.parse(data))\n            } catch(err) {\n              console.log('\\x1b[31m%s\\x1b[0m','RPC result JSON.parse error: ', data)\n            }\n          })\n        })\n\n        req.on('error', (e) => {\n          reject(e)\n        })\n\n        if (method === 'POST') {\n          req.write(JSON.stringify(data))\n        }\n\n        req.end()\n      })\n    }\n  }\n})()\n\nimport PsddFKi3_API from './PsddFKi3/api'\nimport type { RPCFunc, TezJSON } from './types'\n\nconst APIs = {\n  PsddFKi3: PsddFKi3_API\n}\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc\n  fetch: PsddFKi3_API.Gets\n  submit: PsddFKi3_API.Posts\n  mixed: PsddFKi3_API.Mixed\n\n  constructor(params : {\n    host: string, \n    protocol?: string,\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = RPCFn\n\n    const protocol = params.protocol || 'PsddFKi3'\n\n    if (!(protocol in APIs)) {\n      throw `Protocol:${protocol} doesn't exist in protocols`\n    }\n\n    this.fetch = new APIs[protocol].Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new APIs[protocol].Posts((url, data) => this.post.call(this, url, data))\n    this.mixed = new APIs[protocol].Mixed(this.fetch, this.submit)\n  }\n\n  modProtocol(protocol : string) {\n    if (!(protocol in APIs)) {\n      throw `Protocol:${protocol} doesn't exist in protocols`\n    }\n    \n    this.fetch = new APIs[protocol].Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new APIs[protocol].Posts((url, data) => this.post.call(this, url, data))\n    this.mixed = new APIs[protocol].Mixed(this.fetch, this.submit)\n  }\n\n  get(url: string, data?: TezJSON) {\n    return this.RPCFn(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: TezJSON) {\n    return this.RPCFn(this.host + url, data, 'POST')\n  }\n}\n\nexport default TezBridgeNetwork"]}