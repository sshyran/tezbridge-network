{"version":3,"sources":["types.js","util.js","api.js","index.js"],"names":["safeProp","x","props","result","prop","undefined","curr","shift","Object","Array","prop_index","parseInt","isNaN","checkProps","obj","cursor","OpStep","main_fn","next_nodes","args","apply","run","Promise","then","catch","err","forget_result","Gets","fetch","indexOf","start","end","slice","length","path","sub_path","head","header","address","hash_url","hash","filter_hash_url","contract_bytes","Posts","submit","data_json","type_json","param","head_hash","ops","branch","contents","console","log","protocol","signature","signed_op","Mixed","counter","key_hash","submit_param","assign","kind","fee","gas_limit","storage_limit","balance","managerPubkey","toString","forge_operation","TezBridgeNetwork","params","host","RPCFn","url","data","get","call","post","mixed","method","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify"],"mappings":"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","file":"browser.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nexport type TezJSON =\n| number\n| string\n| boolean\n| void\n| {[string]: TezJSON}\n| Array<TezJSON>\n\nexport function safeProp(x : TezJSON, ...props : Array<string | number>) {\n  let result = undefined\n\n  let prop\n  let curr = x\n  while (true) {\n    prop = props.shift()\n    if (prop === undefined)\n      break\n\n    if (curr instanceof Object && !(curr instanceof Array)) {\n      result = curr[prop]\n      curr = curr[prop]\n    } else if (curr instanceof Array) {\n      const prop_index = parseInt(prop)\n      if (isNaN(prop_index))\n        return undefined\n\n      result = curr[prop_index]\n      curr = curr[prop_index]\n    } else {\n      return undefined\n    }\n  }\n\n  return result\n}\n\nexport type RPCFunc = (url: string, data?: TezJSON, method: 'POST' | 'GET') => Promise<TezJSON>\nexport type GetRPCFunc = (url: string, data?: TezJSON) => Promise<TezJSON>\nexport type PostRPCFunc = (url: string, data: TezJSON) => Promise<TezJSON>\n","// @flow\n\nexport function checkProps(obj : Object, ...props : Array<string>) {\n  let prop = props.shift()\n  let cursor = obj\n  while (prop !== undefined) {\n    if (!(prop in cursor) || cursor[prop] === undefined)\n      throw `Property: ${prop} is not in the object`\n\n    prop = props.shift()\n    cursor = cursor[prop]\n  }\n}\n\nexport class OpStep {\n  main_fn: any => any\n  next_nodes: Array<OpStep>\n\n  constructor(main_fn : any => any, ...next_nodes : Array<OpStep>) {\n    this.main_fn = main_fn\n    this.next_nodes = next_nodes\n  }\n\n  run(...args : Array<any>) {\n    const result = this.main_fn.apply(this, args)\n    if (typeof result === 'boolean') {\n      if (result) \n        return this.next_nodes[0] && this.next_nodes[0].run()\n      else\n        return this.next_nodes[1] && this.next_nodes[1].run()\n    }\n\n    if (result instanceof Promise) {\n      return result.then(x => this.next_nodes[0] && this.next_nodes[0].run(x))\n      .catch(err => {\n        throw `OpStep error caught: ${err}`\n      })\n    }\n  }\n}","// @flow\n\nimport type { GetRPCFunc, PostRPCFunc, TezJSON } from './types'\nimport { safeProp } from './types'\nimport { checkProps, OpStep } from './util'\n\n\nexport class Gets {\n  fetch : GetRPCFunc\n  static filter_hash_url(x : string) {\n    if (x.indexOf('/') === -1)\n      throw \"The input hash_url should be in this format: `xx/xx/xx/xx/xx/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\"\n\n    const start = x[0] === '/' ? 1 : 0\n    const end = x.slice(-1) === '/' ? -1 : x.length\n\n    return x.slice(start, end)\n  }\n\n  constructor(fetch : GetRPCFunc) {\n    this.fetch = fetch\n  }\n  custom(path : string) {\n    return this.fetch(path)\n  }\n  head(sub_path? : string) {\n    return this.fetch(`/chains/main/blocks/head/${sub_path || ''}`)\n  }\n  hash() {\n    return this.head('hash')\n  }\n  header() {\n    return this.head('header')\n  }\n  protocol() {\n    return this.header().then(x => safeProp(x, 'protocol'))\n  }\n  predecessor() {\n    return this.header().then(x => safeProp(x, 'predecessor'))\n  }\n  balance(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/delegates/${address}/balance`)\n  }\n  contract(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}`)\n  }\n  contract_bytes(hash_url : string, sub_path? : string) {\n    const hash = Gets.filter_hash_url(hash_url)\n    return this.fetch(`/chains/main/blocks/head/context/raw/bytes/contracts/index/originated/${hash}${sub_path || ''}`)\n  }\n  storage_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/data/storage')\n  }\n  big_map_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/big_map')\n  }\n  manager_key(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/manager_key`)\n           .then(x => safeProp(x, 'manager'))\n  }\n  counter(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/counter`)\n  }\n\n}\n\nexport class Posts {\n  submit : PostRPCFunc\n\n  constructor(submit : PostRPCFunc) {\n    this.submit = submit\n  }\n\n  pack_data(data_json : TezJSON, type_json : TezJSON) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.submit(`/chains/main/blocks/head/helpers/scripts/pack_data`, param)\n               .then(x => safeProp(x, 'packed'))\n  }\n\n  forge_operation(head_hash : string, ops : TezJSON) {\n    const param = {\n      branch: head_hash,\n      contents: ops\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/forge/operations`, param)\n               .then(x => console.log(x))\n  }\n\n  preapply_operation(head_hash : string, ops : TezJSON, protocol : string, signature : string) {\n    const param = {\n      branch: head_hash,\n      contents: ops,\n      protocol,\n      signature\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/preapply/operations`, [param])\n               .then(x => console.log(x))\n  }\n\n  inject_operation(signed_op : string) {\n    return this.submit('/injection/operation', signed_op)\n               .then(x => console.log(x))\n  }\n}\n\n\nexport class Mixed {\n  fetch: Gets\n  submit: Posts\n  constructor(fetch: Gets, submit: Posts) {\n    this.fetch = fetch\n    this.submit = submit\n  }\n\n  async originate(param: {\n    key_hash : string\n  }) {\n    const counter = await this.fetch.counter(param.key_hash)\n\n    const submit_param = Object.assign({}, {\n      kind: \"origination\",\n      // source: this.key_pair.public_key_hash,\n      fee: \"400000\",\n      // counter: $positive_bignum,\n      gas_limit: \"400000\",\n      storage_limit: \"60000\",\n      // managerPubkey: this.key_pair.public_key_hash,\n      balance: \"0\",\n      // \"spendable\"?: boolean,\n      // \"delegatable\"?: boolean,\n      // \"delegate\"?: $Signature.Public_key_hash,\n      // \"script\"?: $scripted.contracts\n    }, {\n      counter,\n      managerPubkey: param.key_hash\n    })\n\n    const head = await this.fetch.head()\n\n    if (!(typeof head === 'string'))\n      throw `Error type for head result: ${head.toString()}`\n\n    const forget_result = await this.submit.forge_operation(head, [submit_param])\n  }\n}","// @flow\n\nimport type { RPCFunc, TezJSON } from './types'\nimport { Gets, Posts, Mixed } from './api'\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc | null\n  fetch: Gets\n  submit: Posts\n  mixed: Mixed\n\n  static RPCFn : RPCFunc = (url, data, method) => {\n    return new Promise<TezJSON>((resolve, reject) => {\n      const req = new XMLHttpRequest()\n      req.addEventListener('load', (pe: ProgressEvent) => {\n        if (req.status === 200)\n          resolve(JSON.parse(req.responseText))\n        else\n          reject(req.responseText)\n      })\n      req.addEventListener('error', reject)\n      req.addEventListener('abort', reject)\n      req.open(method, url)\n      if (method === 'POST') {\n        req.setRequestHeader('Content-Type', 'application/json')\n      }\n      req.send(JSON.stringify(data))\n    })\n  }\n  \n  constructor(params : {\n    host: string, \n    RPCFn?: RPCFunc\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = params.RPCFn || null\n\n    this.fetch = new Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new Posts((url, data) => this.post.call(this, url, data))\n\n    this.mixed = new Mixed(this.fetch, this.submit)\n  }\n\n\n  get(url: string, data?: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'POST')\n  }\n}\n\nexport default TezBridgeNetwork"]}