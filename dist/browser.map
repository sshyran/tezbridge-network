{"version":3,"sources":["types.js","util.js","api.js","index.js"],"names":["safeProp","x","props","result","prop","undefined","curr","shift","Object","Array","prop_index","parseInt","isNaN","checkProps","obj","cursor","OpStep","main_fn","next_nodes","args","apply","run","Promise","then","catch","err","Gets","fetch","indexOf","start","end","slice","length","path","sub_path","head","header","address","hash_url","hash","filter_hash_url","contract_bytes","Posts","submit","data_json","type_json","param","head_hash","ops","branch","contents","protocol","signature","console","log","signed_op","Mixed","t","op_param","counter","source","manager_key","push","params","reveal","public_key","manager_pkh","op","origination","assign","transaction","destination","toString","forge_operation","operation_hex","basic","makeOperationBytes","kind","fee","gas_limit","storage_limit","amount","managerPubkey","balance","TezBridgeNetwork","host","RPCFn","url","data","get","call","post","mixed","method","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify"],"mappings":"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","file":"browser.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nexport type TezJSON =\n| number\n| string\n| boolean\n| void\n| {[string]: TezJSON}\n| Array<TezJSON>\n\nexport function safeProp(x : TezJSON, ...props : Array<string | number>) {\n  let result = undefined\n\n  let prop\n  let curr = x\n  while (true) {\n    prop = props.shift()\n    if (prop === undefined)\n      break\n\n    if (curr instanceof Object && !(curr instanceof Array)) {\n      result = curr[prop]\n      curr = curr[prop]\n    } else if (curr instanceof Array) {\n      const prop_index = parseInt(prop)\n      if (isNaN(prop_index))\n        return undefined\n\n      result = curr[prop_index]\n      curr = curr[prop_index]\n    } else {\n      return undefined\n    }\n  }\n\n  return result\n}\n\nexport type RPCFunc = (url: string, data?: TezJSON, method: 'POST' | 'GET') => Promise<TezJSON>\nexport type GetRPCFunc = (url: string, data?: TezJSON) => Promise<TezJSON>\nexport type PostRPCFunc = (url: string, data: TezJSON) => Promise<TezJSON>\n","// @flow\n\nexport function checkProps(obj : Object, ...props : Array<string>) {\n  let prop = props.shift()\n  let cursor = obj\n  while (prop !== undefined) {\n    if (!(prop in cursor) || cursor[prop] === undefined)\n      throw `Property: ${prop} is not in the object`\n\n    prop = props.shift()\n    cursor = cursor[prop]\n  }\n}\n\nexport class OpStep {\n  main_fn: any => any\n  next_nodes: Array<OpStep>\n\n  constructor(main_fn : any => any, ...next_nodes : Array<OpStep>) {\n    this.main_fn = main_fn\n    this.next_nodes = next_nodes\n  }\n\n  run(...args : Array<any>) {\n    const result = this.main_fn.apply(this, args)\n    if (typeof result === 'boolean') {\n      if (result) \n        return this.next_nodes[0] && this.next_nodes[0].run()\n      else\n        return this.next_nodes[1] && this.next_nodes[1].run()\n    }\n\n    if (result instanceof Promise) {\n      return result.then(x => this.next_nodes[0] && this.next_nodes[0].run(x))\n      .catch(err => {\n        throw `OpStep error caught: ${err}`\n      })\n    }\n  }\n}","// @flow\n\nimport type { GetRPCFunc, PostRPCFunc, TezJSON } from './types'\nimport { safeProp } from './types'\nimport { checkProps, OpStep } from './util'\n\n\nexport class Gets {\n  fetch : GetRPCFunc\n  static filter_hash_url(x : string) {\n    if (x.indexOf('/') === -1)\n      throw \"The input hash_url should be in this format: `xx/xx/xx/xx/xx/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\"\n\n    const start = x[0] === '/' ? 1 : 0\n    const end = x.slice(-1) === '/' ? -1 : x.length\n\n    return x.slice(start, end)\n  }\n\n  constructor(fetch : GetRPCFunc) {\n    this.fetch = fetch\n  }\n  custom(path : string) {\n    return this.fetch(path)\n  }\n  head(sub_path? : string) {\n    return this.fetch(`/chains/main/blocks/head/${sub_path || ''}`)\n  }\n  hash() {\n    return this.head('hash')\n  }\n  header() {\n    return this.head('header')\n  }\n  protocol() {\n    return this.header().then(x => safeProp(x, 'protocol'))\n  }\n  predecessor() {\n    return this.header().then(x => safeProp(x, 'predecessor'))\n  }\n  balance(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/delegates/${address}/balance`)\n  }\n  contract(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}`)\n  }\n  contract_bytes(hash_url : string, sub_path? : string) {\n    const hash = Gets.filter_hash_url(hash_url)\n    return this.fetch(`/chains/main/blocks/head/context/raw/bytes/contracts/index/originated/${hash}${sub_path || ''}`)\n  }\n  storage_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/data/storage')\n  }\n  big_map_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/big_map')\n  }\n  manager_key(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/manager_key`)\n  }\n  counter(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/counter`)\n  }\n\n}\n\nexport class Posts {\n  submit : PostRPCFunc\n\n  constructor(submit : PostRPCFunc) {\n    this.submit = submit\n  }\n\n  pack_data(data_json : TezJSON, type_json : TezJSON) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.submit(`/chains/main/blocks/head/helpers/scripts/pack_data`, param)\n               .then(x => safeProp(x, 'packed'))\n  }\n\n  forge_operation(head_hash : string, ops : TezJSON) {\n    const param = {\n      branch: head_hash,\n      contents: ops\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/forge/operations`, param)\n  }\n\n  preapply_operation(head_hash : string, ops : TezJSON, protocol : string, signature : string) {\n    const param = {\n      branch: head_hash,\n      contents: ops,\n      protocol,\n      signature\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/preapply/operations`, [param])\n               .then(x => console.log(x))\n  }\n\n  inject_operation(signed_op : string) {\n    return this.submit('/injection/operation', signed_op)\n               .then(x => console.log(x))\n  }\n}\n\n\nexport class Mixed {\n  fetch: Gets\n  submit: Posts\n\n  constructor(fetch: Gets, submit: Posts) {\n    this.fetch = fetch\n    this.submit = submit\n  }\n\n  static params = {\n    reveal(source: string, public_key: string, counter: string) {\n      return {\n        kind: 'reveal',\n        source,\n        fee: '1300',\n        gas_limit: '10000',\n        storage_limit: '0',\n        public_key,\n        counter\n      }\n    },\n    transaction(source: string, destination: string, counter: string) {\n      return {\n        kind: 'transaction',\n        source,\n        fee: '400000',\n        gas_limit: '400000',\n        storage_limit: '60000',\n        amount: '0',\n        counter,\n        destination,\n        // parameters?: $micheline.michelson_v1.expression\n      }\n    },\n    origination(source: string, manager_key: string, counter: string) {\n      return {\n        kind: 'origination',\n        source,\n        fee: '400000',\n        counter,\n        gas_limit: '400000',\n        storage_limit: '60000',\n        managerPubkey: manager_key,\n        balance: '0',\n        // \"spendable\"?: boolean,\n        // \"delegatable\"?: boolean,\n        // \"delegate\"?: $Signature.Public_key_hash,\n        // \"script\"?: $scripted.contracts\n      }\n    }\n  }\n\n  async makeOperationBytes(t: 'origination' | 'transaction', param: {\n    source : string,\n    public_key: string\n  }, op_param: Object) {\n    const ops = []\n    const counter = await this.fetch.counter(param.source)\n    const manager_key = await this.fetch.manager_key(param.source)\n\n    if (typeof counter !== 'string')\n      throw 'Invalid counter'\n\n    if (!safeProp(manager_key, 'key')) {\n      ops.push(Mixed.params.reveal(param.source, param.public_key, counter))\n    }\n\n    const manager_pkh = safeProp(manager_key, 'manager')\n    if (typeof manager_pkh !== 'string')\n      throw 'Invalid manager public key hash'\n\n    const op = {\n      origination: Object.assign(\n        Mixed.params.origination(param.source, manager_pkh, counter),\n        op_param\n      ),\n      transaction: Object.assign(\n        Mixed.params.transaction(param.source, op_param.destination, counter)\n      )\n    }[t]\n\n    if (!op)\n      throw `Invalid t(${t}) in makeOperationBytes`\n\n    ops.push(op)\n\n    const head_hash = await this.fetch.hash()\n\n    if (!(typeof head_hash === 'string'))\n      throw `Error type for head_hash result: ${head_hash.toString()}`\n\n    const operation_hex = await this.submit.forge_operation(head_hash, ops)\n    const protocol = await this.fetch.protocol()\n\n    return {\n      protocol,\n      operation_hex,\n      branch: head_hash,\n      contents: ops\n    }\n  }\n\n  async makeOriginationBytes(basic : {\n    source : string,\n    public_key: string\n  }, op_param : Object) {\n    return this.makeOperationBytes('origination', {\n      source: basic.source,\n      public_key: basic.public_key\n    }, op_param)\n  }\n\n  async makeTransactionBytes(basic : {\n    source : string,\n    public_key: string\n  }, op_param : Object) {\n    return this.makeOperationBytes('transaction', {\n      source: basic.source,\n      public_key: basic.public_key\n    }, op_param)\n  }\n}","// @flow\n\nimport type { RPCFunc, TezJSON } from './types'\nimport { Gets, Posts, Mixed } from './api'\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc | null\n  fetch: Gets\n  submit: Posts\n  mixed: Mixed\n\n  static RPCFn : RPCFunc = (url, data, method) => {\n    return new Promise<TezJSON>((resolve, reject) => {\n      const req = new XMLHttpRequest()\n      req.addEventListener('load', (pe: ProgressEvent) => {\n        if (req.status === 200)\n          resolve(JSON.parse(req.responseText))\n        else\n          reject(req.responseText)\n      })\n      req.addEventListener('error', reject)\n      req.addEventListener('abort', reject)\n      req.open(method, url)\n      if (method === 'POST') {\n        req.setRequestHeader('Content-Type', 'application/json')\n      }\n      req.send(JSON.stringify(data))\n    })\n  }\n  \n  constructor(params : {\n    host: string, \n    RPCFn?: RPCFunc\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = params.RPCFn || null\n\n    this.fetch = new Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new Posts((url, data) => this.post.call(this, url, data))\n\n    this.mixed = new Mixed(this.fetch, this.submit)\n  }\n\n\n  get(url: string, data?: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'POST')\n  }\n}\n\nexport default TezBridgeNetwork"]}