{"version":3,"sources":["types.js","../src/util.js","PsddFKi3/api.js","../src/index.js","util.js","index.js"],"names":["safeProp","x","props","result","prop","undefined","curr","shift","Object","Array","prop_index","parseInt","isNaN","checkProps","obj","cursor","filterHashUrl","indexOf","start","end","slice","length","OpStep","constructor","main_fn","next_nodes","run","args","apply","Promise","then","catch","err","Gets","fetch","custom","path","head","sub_path","hash","header","protocol","predecessor","balance","address","contract","contract_bytes","hash_url","storage_bytes","big_map_bytes","manager_key","counter","Posts","submit","pack_data","data_json","type_json","param","forge_operation","head_hash","ops","branch","contents","preapply_operation","signature","inject_operation","signed_op","Mixed","makeOperationBytes","op_params","counter_prev","source","push","params","reveal","public_key","manager_pkh","forEach","item","op","origination","assign","transaction","destination","kind","toString","operation_hex","makeOriginationBytes","basic","op_param","makeTransactionBytes","fee","gas_limit","storage_limit","amount","managerPubkey","TezBridgeNetwork","RPCFn","process","env","NODE_ENV","url","data","method","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify","https","require","raw_url","parsed_url","options","hostname","port","headers","request","res","on","d","console","log","e","write","APIs","PsddFKi3","PsddFKi3_API","host","get","call","post","mixed","modProtocol","assert","v","m","ok","network_client","fn_tests","r1","r2","r3","r4","gets_tests","r","level","script","manager","used_bytes","len","storage_len","keys","reduce","acc","posts_tests","mixed_tests","spendable","delegatable","code","storage","parameters","main"],"mappings":"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","file":"test.map","sourceRoot":"../test","sourcesContent":["// @flow\n\nexport type TezJSON =\n| number\n| string\n| boolean\n| void\n| {[string]: TezJSON}\n| Array<TezJSON>\n\nexport function safeProp(x : TezJSON, ...props : Array<string | number>) {\n  let result = undefined\n\n  let prop\n  let curr = x\n  while (true) {\n    prop = props.shift()\n    if (prop === undefined)\n      break\n\n    if (curr instanceof Object && !(curr instanceof Array)) {\n      result = curr[prop]\n      curr = curr[prop]\n    } else if (curr instanceof Array) {\n      const prop_index = parseInt(prop)\n      if (isNaN(prop_index))\n        return undefined\n\n      result = curr[prop_index]\n      curr = curr[prop_index]\n    } else {\n      return undefined\n    }\n  }\n\n  return result\n}\n\nexport type RPCFunc = (url: string, data?: TezJSON, method: 'POST' | 'GET') => Promise<TezJSON>\nexport type GetRPCFunc = (url: string, data?: TezJSON) => Promise<TezJSON>\nexport type PostRPCFunc = (url: string, data: TezJSON) => Promise<TezJSON>\n","// @flow\n\nexport function checkProps(obj : Object, ...props : Array<string>) {\n  let prop = props.shift()\n  let cursor = obj\n  while (prop !== undefined) {\n    if (!(prop in cursor) || cursor[prop] === undefined)\n      throw `Property: ${prop} is not in the object`\n\n    prop = props.shift()\n    cursor = cursor[prop]\n  }\n}\n\nexport function filterHashUrl(x : string) {\n  if (x.indexOf('/') === -1)\n    throw \"The input hash_url should be in this format: `xx/xx/xx/xx/xx/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\"\n\n  const start = x[0] === '/' ? 1 : 0\n  const end = x.slice(-1) === '/' ? -1 : x.length\n\n  return x.slice(start, end)\n}\n\nexport class OpStep {\n  main_fn: any => any\n  next_nodes: Array<OpStep>\n\n  constructor(main_fn : any => any, ...next_nodes : Array<OpStep>) {\n    this.main_fn = main_fn\n    this.next_nodes = next_nodes\n  }\n\n  run(...args : Array<any>) {\n    const result = this.main_fn.apply(this, args)\n    if (typeof result === 'boolean') {\n      if (result) \n        return this.next_nodes[0] && this.next_nodes[0].run()\n      else\n        return this.next_nodes[1] && this.next_nodes[1].run()\n    }\n\n    if (result instanceof Promise) {\n      return result.then(x => this.next_nodes[0] && this.next_nodes[0].run(x))\n      .catch(err => {\n        throw `OpStep error caught: ${err}`\n      })\n    }\n  }\n}","// @flow\n\nimport type { GetRPCFunc, PostRPCFunc, TezJSON } from '../types'\nimport { safeProp } from '../types'\nimport { checkProps, filterHashUrl, OpStep } from '../util'\n\n\nexport class Gets {\n  fetch : GetRPCFunc\n\n  constructor(fetch : GetRPCFunc) {\n    this.fetch = fetch\n  }\n  custom(path : string) {\n    return this.fetch(path)\n  }\n  head(sub_path? : string) {\n    return this.fetch(`/chains/main/blocks/head/${sub_path || ''}`)\n  }\n  hash() {\n    return this.head('hash')\n  }\n  header() {\n    return this.head('header')\n  }\n  protocol() {\n    return this.header().then(x => safeProp(x, 'protocol'))\n  }\n  predecessor() {\n    return this.header().then(x => safeProp(x, 'predecessor'))\n  }\n  balance(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/delegates/${address}/balance`)\n  }\n  contract(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}`)\n  }\n  contract_bytes(hash_url : string, sub_path? : string) {\n    const hash = filterHashUrl(hash_url)\n    return this.fetch(`/chains/main/blocks/head/context/raw/bytes/contracts/index/originated/${hash}${sub_path || ''}`)\n  }\n  storage_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/data/storage')\n  }\n  big_map_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/big_map')\n  }\n  manager_key(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/manager_key`)\n  }\n  counter(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/counter`)\n  }\n\n}\n\nexport class Posts {\n  submit : PostRPCFunc\n\n  constructor(submit : PostRPCFunc) {\n    this.submit = submit\n  }\n\n  pack_data(data_json : TezJSON, type_json : TezJSON) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.submit(`/chains/main/blocks/head/helpers/scripts/pack_data`, param)\n               .then(x => safeProp(x, 'packed'))\n  }\n\n  forge_operation(head_hash : string, ops : TezJSON) {\n    const param = {\n      branch: head_hash,\n      contents: ops\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/forge/operations`, param)\n  }\n\n  preapply_operation(head_hash : string, ops : TezJSON, protocol : string, signature : string) {\n    const param = {\n      branch: head_hash,\n      contents: ops,\n      protocol,\n      signature\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/preapply/operations`, [param])\n  }\n\n  inject_operation(signed_op : string) {\n    return this.submit('/injection/operation', signed_op)\n  }\n}\n\n\nexport class Mixed {\n  fetch: Gets\n  submit: Posts\n\n  constructor(fetch: Gets, submit: Posts) {\n    this.fetch = fetch\n    this.submit = submit\n  }\n\n  static params = {\n    reveal(source: string, public_key: string, counter: string) {\n      return {\n        kind: 'reveal',\n        source,\n        fee: '1300',\n        gas_limit: '10000',\n        storage_limit: '0',\n        public_key,\n        counter\n      }\n    },\n    transaction(source: string, destination: string, counter: string) {\n      return {\n        kind: 'transaction',\n        source,\n        fee: '400000',\n        gas_limit: '400000',\n        storage_limit: '60000',\n        amount: '0',\n        counter,\n        destination,\n        // parameters?: $micheline.michelson_v1.expression\n      }\n    },\n    origination(source: string, manager_key: string, counter: string) {\n      return {\n        kind: 'origination',\n        source,\n        fee: '400000',\n        counter,\n        gas_limit: '400000',\n        storage_limit: '60000',\n        managerPubkey: manager_key,\n        balance: '0',\n        // \"spendable\"?: boolean,\n        // \"delegatable\"?: boolean,\n        // \"delegate\"?: $Signature.Public_key_hash,\n        // \"script\"?: $scripted.contracts\n      }\n    }\n  }\n\n  async makeOperationBytes(param: {\n    source : string,\n    public_key: string\n  }, op_params: Array<{\n    kind : 'origination' | 'transaction',\n    destination? : string\n  }>) {\n    const ops = []\n    const counter_prev = await this.fetch.counter(param.source)\n    const manager_key = await this.fetch.manager_key(param.source)\n\n    if (typeof counter_prev !== 'string')\n      throw 'Invalid counter'\n\n    let counter = parseInt(counter_prev) + 1 + ''\n\n    if (!safeProp(manager_key, 'key')) {\n      ops.push(Mixed.params.reveal(param.source, param.public_key, counter))\n      counter = parseInt(counter) + 1 + ''\n    }\n\n    const manager_pkh = safeProp(manager_key, 'manager')\n    if (typeof manager_pkh !== 'string')\n      throw 'Invalid manager public key hash'\n\n    op_params.forEach(item => {\n      const op = {\n        origination: Object.assign(\n          {},\n          Mixed.params.origination(param.source, manager_pkh, counter),\n          item\n        ),\n        transaction: Object.assign(\n          {},\n          Mixed.params.transaction(param.source, item.destination || '', counter),\n          item\n        )\n      }[item.kind]\n\n      if (!op)\n        throw `Invalid t(${item.kind}) in makeOperationBytes`\n\n      ops.push(op)\n      counter = parseInt(counter) + 1 + ''\n    })\n\n    const head_hash = await this.fetch.hash()\n\n    if (!(typeof head_hash === 'string'))\n      throw `Error type for head_hash result: ${head_hash.toString()}`\n\n    const operation_hex = await this.submit.forge_operation(head_hash, ops)\n    const protocol = await this.fetch.protocol()\n\n    return {\n      protocol,\n      operation_hex,\n      branch: head_hash,\n      contents: ops\n    }\n  }\n\n  async makeOriginationBytes(basic : {\n    source : string,\n    public_key: string\n  }, op_param : Object) {\n    return this.makeOperationBytes({\n      source: basic.source,\n      public_key: basic.public_key\n    }, [Object.assign({\n      kind: 'origination'\n    }, op_param)])\n  }\n\n  async makeTransactionBytes(basic : {\n    source : string,\n    public_key: string\n  }, op_param : Object) {\n    return this.makeOperationBytes({\n      source: basic.source,\n      public_key: basic.public_key\n    }, [Object.assign({\n      kind: 'transaction'\n    }, op_param)])\n  }\n}\n\nexport default { Gets, Posts, Mixed }","// @flow\n\nconst RPCFn = (() => {\n  if (process.env.NODE_ENV === 'browser') {\n    return (url, data, method) => {\n      return new Promise<TezJSON>((resolve, reject) => {\n        const req = new XMLHttpRequest()\n        req.addEventListener('load', (pe: ProgressEvent) => {\n          if (req.status === 200)\n            resolve(JSON.parse(req.responseText))\n          else\n            reject(req.responseText)\n        })\n        req.addEventListener('error', reject)\n        req.addEventListener('abort', reject)\n        req.open(method, url)\n        if (method === 'POST') {\n          req.setRequestHeader('Content-Type', 'application/json')\n        }\n        req.send(JSON.stringify(data))\n      })\n    }\n  } else {\n    const https = require('https')\n    const url = require('url')\n    return (raw_url: string, data?: TezJSON, method: 'POST' | 'GET') => {\n      return new Promise<TezJSON>((resolve, reject) => {\n        const parsed_url = url.parse(raw_url)\n        const options = {\n          hostname: parsed_url.hostname,\n          port: parsed_url.port,\n          path: parsed_url.path,\n          method,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n\n        const req = https.request(options, (res) => {\n          let data = ''\n          res.on('data', (d) => {\n            data += d.toString()\n          })\n\n          res.on('end', () => {\n            try {\n              resolve(JSON.parse(data))\n            } catch(err) {\n              console.log('\\x1b[31m%s\\x1b[0m','RPC result JSON.parse error: ', data)\n            }\n          })\n        })\n\n        req.on('error', (e) => {\n          reject(e)\n        })\n\n        if (method === 'POST') {\n          req.write(JSON.stringify(data))\n        }\n\n        req.end()\n      })\n    }\n  }\n})()\n\nimport PsddFKi3_API from './PsddFKi3/api'\nimport type { RPCFunc, TezJSON } from './types'\n\nconst APIs = {\n  PsddFKi3: PsddFKi3_API\n}\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc\n  fetch: PsddFKi3_API.Gets\n  submit: PsddFKi3_API.Posts\n  mixed: PsddFKi3_API.Mixed\n\n  constructor(params : {\n    host: string, \n    protocol?: string,\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = RPCFn\n\n    const protocol = params.protocol || 'PsddFKi3'\n\n    if (!(protocol in APIs)) {\n      throw `Protocol:${protocol} doesn't exist in protocols`\n    }\n\n    this.fetch = new APIs[protocol].Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new APIs[protocol].Posts((url, data) => this.post.call(this, url, data))\n    this.mixed = new APIs[protocol].Mixed(this.fetch, this.submit)\n  }\n\n  modProtocol(protocol : string) {\n    if (!(protocol in APIs)) {\n      throw `Protocol:${protocol} doesn't exist in protocols`\n    }\n    \n    this.fetch = new APIs[protocol].Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new APIs[protocol].Posts((url, data) => this.post.call(this, url, data))\n    this.mixed = new APIs[protocol].Mixed(this.fetch, this.submit)\n  }\n\n  get(url: string, data?: TezJSON) {\n    return this.RPCFn(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: TezJSON) {\n    return this.RPCFn(this.host + url, data, 'POST')\n  }\n}\n\nexport default TezBridgeNetwork","// @flow\n\nimport type { TezJSON } from './../src/types'\nimport _assert from 'assert'\n\nexport const assert = (v: any, m : string) => {\n  _assert.ok(v, m)\n  console.log('\\x1b[32m%s\\x1b[0m','PASS:', m)\n}\n","// @flow\n\nimport TezBridgeNetwork from './../src/index'\nimport { filterHashUrl } from './../src/util'\n\nimport { assert } from './util'\n\nconst network_client = new TezBridgeNetwork({\n  host: 'https://testnet.tezbridge.com'\n})\n\nconst fn_tests = async () => {\n  {\n    const r1 = filterHashUrl('3e/e2/31/36/6b/1336eb61419df8fc666056025929bf')\n    const r2 = filterHashUrl('/3e/e2/31/36/6b/1336eb61419df8fc666056025929bf')\n    const r3 = filterHashUrl('/3e/e2/31/36/6b/1336eb61419df8fc666056025929bf/')\n    const r4 = filterHashUrl('3e/e2/31/36/6b/1336eb61419df8fc666056025929bf/')\n    assert(\n      r1 === r2 && r2 === r3 && r3 === r4 && r1 === '3e/e2/31/36/6b/1336eb61419df8fc666056025929bf', \n      'FN: filterHashUrl')\n  }\n}\n\nconst gets_tests = async () => {\n  {\n    const r : Object = await network_client.fetch.head()\n    assert(r.header.level > 1, 'FETCH: head.header.level')\n  }\n  \n  {\n    const r : Object = await network_client.fetch.header()\n    assert(r.level > 1, 'FETCH: header.level')\n  }\n\n  {\n    const r : Object = await network_client.fetch.protocol()\n    assert(r.length === 51 && r[0] === 'P', 'FETCH: head.header.protocol')\n  }\n\n  {\n    const r : Object = await network_client.fetch.hash()\n    assert(r.length === 51, 'FETCH: head.hash')\n  }\n\n  {\n    const r : Object = await network_client.fetch.contract('KT1T8u994jypfZK68QGAR7rdKRzFHFTXsRDM')\n    assert(r.script && r.manager && r.balance, 'FETCH: contract')\n  }\n\n  {\n    const r : Object = await network_client.fetch.balance('tz1MJhE5bHTnwSsvZL8AQaXdriN1me16UtpG')\n    assert(parseInt(r) > 1, 'FETCH: contract.balance')\n  }\n\n  {\n    const r : Object = await network_client.fetch.manager_key('KT1T8u994jypfZK68QGAR7rdKRzFHFTXsRDM')\n    assert(r.manager === 'tz1aFrpsJ63J4psy4VDQjZork4uW9JuZiY9i', 'FETCH: contract.manager')\n  }\n\n  {\n    const r : Object = await network_client.fetch.counter('tz1aFrpsJ63J4psy4VDQjZork4uW9JuZiY9i')\n    assert(parseInt(r) > 1, 'FETCH: contract.counter')\n  }\n\n  {\n    const r : Object = await network_client.fetch.predecessor()\n    assert(r.length === 51, 'FETCH: head.header.predecessor')\n  }\n\n  {\n    const r : Object = await network_client.fetch.contract_bytes('21/52/38/ac/1c/e4ec73e3ddac63eb58816f9a581d16')\n    assert(r.balance && r.data && r.used_bytes && r.len && r.manager, 'FETCH: raw contract in bytes')\n  }\n\n  {\n    const r : Object = await network_client.fetch.storage_bytes('21/52/38/ac/1c/e4ec73e3ddac63eb58816f9a581d16')\n    const storage_len = parseInt(r.slice(0, 8), 16)\n    assert(r.length === 8 + storage_len * 2, 'FETCH: raw storage of contract in bytes')\n  }\n\n  {\n    const r : Object = await network_client.fetch.big_map_bytes('21/52/38/ac/1c/e4ec73e3ddac63eb58816f9a581d16')\n    assert(Object.keys(r).reduce((acc, x) => acc && (x.length === 2 ? true : false), true), 'FETCH: raw big_map of contract in bytes')\n  }\n}\n\nconst posts_tests = async () => {\n  {\n    const r : Object = await network_client.submit.pack_data(\n      { \"prim\": \"Pair\", \"args\": [ { \"string\": \"abc\" }, { \"int\": \"34\" } ] }, \n      { \"prim\": \"pair\", \"args\": [ { \"prim\": \"string\" }, { \"prim\": \"nat\" } ] }\n    )\n    assert(r === '05070701000000036162630022', 'SUBMIT: pack data')\n  }\n}\n\nconst mixed_tests = async () => {\n  {\n    const r : Object = await network_client.mixed.makeOriginationBytes({\n      source: 'tz1hgWvYdzLECdrq5zndGHwCGnUCJq1KFe3r',\n      public_key: 'edpkunm1aRnRtHwVsBGSFgKmw5EhBn4gR6NC5JqVoAi57viSgAN3t5'\n    }, {\n      spendable: false,\n      delegatable: false,\n      script: {\n        code: [{\"prim\":\"parameter\",\"args\":[{\"prim\":\"contract\",\"args\":[{\"prim\":\"unit\"}],\"annots\":[\":X\"]}]},{\"prim\":\"storage\",\"args\":[{\"prim\":\"unit\"}]},{\"prim\":\"code\",\"args\":[[{\"prim\":\"CDR\",\"annots\":[\"@storage_slash_1\"]},{\"prim\":\"NIL\",\"args\":[{\"prim\":\"operation\"}]},{\"prim\":\"PAIR\"}]]}],\n        storage: {\"prim\":\"Pair\",\"args\":[[],{\"prim\":\"Unit\"}]}\n      }\n    })\n\n    assert(r.operation_hex.length > 4, 'MIXED: makeOriginationBytes')\n  }\n\n  {\n    const r : Object = await network_client.mixed.makeTransactionBytes({\n      source: 'tz1hgWvYdzLECdrq5zndGHwCGnUCJq1KFe3r',\n      public_key: 'edpkunm1aRnRtHwVsBGSFgKmw5EhBn4gR6NC5JqVoAi57viSgAN3t5'\n    }, {\n      amount: '1',\n      destination: 'tz3WXYtyDUNL91qfiCJtVUX746QpNv5i5ve5',\n      parameters: {\"prim\":\"Unit\"}\n    })\n\n    assert(r.operation_hex.length > 4, 'MIXED: makeTransactionBytes')\n  }\n\n  {\n\n    const r : Object = await network_client.mixed.makeOperationBytes({\n      source: 'tz1hgWvYdzLECdrq5zndGHwCGnUCJq1KFe3r',\n      public_key: 'edpkunm1aRnRtHwVsBGSFgKmw5EhBn4gR6NC5JqVoAi57viSgAN3t5'\n    }, \n    [\n      {\n        kind: 'origination',\n        spendable: false,\n        delegatable: false,\n        script: {\n          code: [{\"prim\":\"parameter\",\"args\":[{\"prim\":\"contract\",\"args\":[{\"prim\":\"unit\"}],\"annots\":[\":X\"]}]},{\"prim\":\"storage\",\"args\":[{\"prim\":\"unit\"}]},{\"prim\":\"code\",\"args\":[[{\"prim\":\"CDR\",\"annots\":[\"@storage_slash_1\"]},{\"prim\":\"NIL\",\"args\":[{\"prim\":\"operation\"}]},{\"prim\":\"PAIR\"}]]}],\n          storage: {\"prim\":\"Pair\",\"args\":[[],{\"prim\":\"Unit\"}]}\n        }\n      },\n      {\n        kind: 'transaction',\n        amount: '1',\n        destination: 'tz3WXYtyDUNL91qfiCJtVUX746QpNv5i5ve5',\n        parameters: {\"prim\":\"Unit\"}\n      }\n    ])\n\n    assert(r.operation_hex.length > 4, 'MIXED: makeOperationBytes')\n  }\n}\n\nconst main = async () => {\n  await fn_tests()\n  await gets_tests()\n  await posts_tests()\n  await mixed_tests()\n}\n\nmain()\n"]}