{"version":3,"sources":["types.js","util.js","PsddFKi3/api.js","external.js","index.js"],"names":["safeProp","x","props","result","prop","undefined","curr","shift","Object","Array","prop_index","parseInt","isNaN","checkProps","obj","cursor","filterHashUrl","indexOf","start","end","slice","length","OpStep","constructor","main_fn","next_nodes","run","args","apply","Promise","then","catch","err","Gets","fetch","custom","path","head","sub_path","hash","header","protocol","predecessor","balance","address","contract","contract_bytes","hash_url","storage_bytes","big_map_bytes","manager_key","counter","Posts","submit","pack_data","data_json","type_json","param","forge_operation","head_hash","ops","branch","contents","preapply_operation","signature","inject_operation","signed_op","Mixed","makeOperationBytes","op_params","counter_prev","source","reveal","params","public_key","kind","push","assign","manager_pkh","forEach","item","op","origination","transaction","destination","toString","operation_hex","makeOriginationBytes","basic","op_param","makeTransactionBytes","fee","gas_limit","storage_limit","amount","managerPubkey","External","net_type","domain","spendable_contracts","url","operations","type","inner_op","spendable","tz1","tz","TezBridgeNetwork","RPCFn","process","env","NODE_ENV","data","method","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify","https","require","raw_url","parsed_url","options","hostname","port","headers","request","res","on","d","console","log","e","write","APIs","PsddFKi3","PsddFKi3_API","host","get","call","post","mixed","external","switchProtocol"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nexport type TezJSON =\n| number\n| string\n| boolean\n| void\n| {[string]: TezJSON}\n| Array<TezJSON>\n\nexport function safeProp(x : TezJSON, ...props : Array<string | number>) {\n  let result = undefined\n\n  let prop\n  let curr = x\n  while (true) {\n    prop = props.shift()\n    if (prop === undefined)\n      break\n\n    if (curr instanceof Object && !(curr instanceof Array)) {\n      result = curr[prop]\n      curr = curr[prop]\n    } else if (curr instanceof Array) {\n      const prop_index = parseInt(prop)\n      if (isNaN(prop_index))\n        return undefined\n\n      result = curr[prop_index]\n      curr = curr[prop_index]\n    } else {\n      return undefined\n    }\n  }\n\n  return result\n}\n\nexport type RPCFunc = (url: string, data?: TezJSON, method: 'POST' | 'GET') => Promise<TezJSON>\nexport type GetRPCFunc = (url: string, data?: TezJSON) => Promise<TezJSON>\nexport type PostRPCFunc = (url: string, data: TezJSON) => Promise<TezJSON>\n","// @flow\n\nexport function checkProps(obj : Object, ...props : Array<string>) {\n  let prop = props.shift()\n  let cursor = obj\n  while (prop !== undefined) {\n    if (!(prop in cursor) || cursor[prop] === undefined)\n      throw `Property: ${prop} is not in the object`\n\n    prop = props.shift()\n    cursor = cursor[prop]\n  }\n}\n\nexport function filterHashUrl(x : string) {\n  if (x.indexOf('/') === -1)\n    throw \"The input hash_url should be in this format: `xx/xx/xx/xx/xx/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\"\n\n  const start = x[0] === '/' ? 1 : 0\n  const end = x.slice(-1) === '/' ? -1 : x.length\n\n  return x.slice(start, end)\n}\n\nexport class OpStep {\n  main_fn: any => any\n  next_nodes: Array<OpStep>\n\n  constructor(main_fn : any => any, ...next_nodes : Array<OpStep>) {\n    this.main_fn = main_fn\n    this.next_nodes = next_nodes\n  }\n\n  run(...args : Array<any>) {\n    const result = this.main_fn.apply(this, args)\n    if (typeof result === 'boolean') {\n      if (result) \n        return this.next_nodes[0] && this.next_nodes[0].run()\n      else\n        return this.next_nodes[1] && this.next_nodes[1].run()\n    }\n\n    if (result instanceof Promise) {\n      return result.then(x => this.next_nodes[0] && this.next_nodes[0].run(x))\n      .catch(err => {\n        throw `OpStep error caught: ${err}`\n      })\n    }\n  }\n}","// @flow\n\nimport type { GetRPCFunc, PostRPCFunc, TezJSON } from '../types'\nimport { safeProp } from '../types'\nimport { checkProps, filterHashUrl, OpStep } from '../util'\n\n\nexport class Gets {\n  fetch : GetRPCFunc\n\n  constructor(fetch : GetRPCFunc) {\n    this.fetch = fetch\n  }\n  custom(path : string) {\n    return this.fetch(path)\n  }\n  head(sub_path? : string) {\n    return this.fetch(`/chains/main/blocks/head/${sub_path || ''}`)\n  }\n  hash() {\n    return this.head('hash')\n  }\n  header() {\n    return this.head('header')\n  }\n  protocol() {\n    return this.header().then(x => safeProp(x, 'protocol'))\n  }\n  predecessor() {\n    return this.header().then(x => safeProp(x, 'predecessor'))\n  }\n  balance(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/balance`)\n  }\n  contract(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}`)\n  }\n  contract_bytes(hash_url : string, sub_path? : string) {\n    const hash = filterHashUrl(hash_url)\n    return this.fetch(`/chains/main/blocks/head/context/raw/bytes/contracts/index/originated/${hash}${sub_path || ''}`)\n  }\n  storage_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/data/storage')\n  }\n  big_map_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/big_map')\n  }\n  manager_key(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/manager_key`)\n  }\n  counter(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/counter`)\n  }\n\n}\n\nexport class Posts {\n  submit : PostRPCFunc\n\n  constructor(submit : PostRPCFunc) {\n    this.submit = submit\n  }\n\n  pack_data(data_json : TezJSON, type_json : TezJSON) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.submit(`/chains/main/blocks/head/helpers/scripts/pack_data`, param)\n               .then(x => safeProp(x, 'packed'))\n  }\n\n  forge_operation(head_hash : string, ops : TezJSON) {\n    const param = {\n      branch: head_hash,\n      contents: ops\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/forge/operations`, param)\n  }\n\n  preapply_operation(head_hash : string, ops : TezJSON, protocol : string, signature : string) {\n    const param = {\n      branch: head_hash,\n      contents: ops,\n      protocol,\n      signature\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/preapply/operations`, [param])\n  }\n\n  inject_operation(signed_op : string) {\n    return this.submit('/injection/operation', signed_op)\n  }\n}\n\n\nexport class Mixed {\n  fetch: Gets\n  submit: Posts\n\n  constructor(fetch: Gets, submit: Posts) {\n    this.fetch = fetch\n    this.submit = submit\n  }\n\n  static params = {\n    reveal(source: string, public_key: string, counter: string) {\n      return {\n        kind: 'reveal',\n        source,\n        fee: '1300',\n        gas_limit: '10000',\n        storage_limit: '0',\n        public_key,\n        counter\n      }\n    },\n    transaction(source: string, destination: string, counter: string) {\n      return {\n        kind: 'transaction',\n        source,\n        fee: '400000',\n        gas_limit: '400000',\n        storage_limit: '60000',\n        amount: '0',\n        counter,\n        destination,\n        // parameters?: $micheline.michelson_v1.expression\n      }\n    },\n    origination(source: string, manager_key: string, counter: string) {\n      return {\n        kind: 'origination',\n        source,\n        fee: '400000',\n        counter,\n        gas_limit: '400000',\n        storage_limit: '60000',\n        managerPubkey: manager_key,\n        balance: '0',\n        // \"spendable\"?: boolean,\n        // \"delegatable\"?: boolean,\n        // \"delegate\"?: $Signature.Public_key_hash,\n        // \"script\"?: $scripted.contracts\n      }\n    }\n  }\n\n  async makeOperationBytes(param: {\n    source : string,\n    public_key: string\n  }, op_params: Array<{\n    kind : 'reveal' | 'origination' | 'transaction',\n    destination? : string\n  }>) {\n    const ops : Array<TezJSON> = []\n    const counter_prev = await this.fetch.counter(param.source)\n    const manager_key = await this.fetch.manager_key(param.source)\n\n    if (typeof counter_prev !== 'string')\n      throw 'Invalid counter'\n\n    let counter = parseInt(counter_prev) + 1 + ''\n\n    if (!safeProp(manager_key, 'key')) {\n      const reveal = Mixed.params.reveal(param.source, param.public_key, counter)\n\n      if (op_params.length && op_params[0].kind === 'reveal')\n        ops.push(Object.assign({}, reveal, op_params.shift()))\n      else\n        ops.push(reveal)\n\n      counter = parseInt(counter) + 1 + ''\n    }\n\n    const manager_pkh = safeProp(manager_key, 'manager')\n    if (typeof manager_pkh !== 'string')\n      throw 'Invalid manager public key hash'\n\n    op_params.forEach(item => {\n      const op = {\n        reveal: null,\n        origination: Object.assign(\n          {},\n          Mixed.params.origination(param.source, manager_pkh, counter),\n          item\n        ),\n        transaction: Object.assign(\n          {},\n          Mixed.params.transaction(param.source, item.destination || '', counter),\n          item\n        )\n      }[item.kind]\n\n      if (!op)\n        throw `Invalid t(${item.kind}) in makeOperationBytes`\n\n      ops.push(op)\n      counter = parseInt(counter) + 1 + ''\n    })\n\n    const head_hash = await this.fetch.hash()\n\n    if (!(typeof head_hash === 'string'))\n      throw `Error type for head_hash result: ${head_hash.toString()}`\n\n    const operation_hex = await this.submit.forge_operation(head_hash, ops)\n    const protocol = await this.fetch.protocol()\n\n    return {\n      protocol,\n      operation_hex,\n      branch: head_hash,\n      contents: ops\n    }\n  }\n\n  async makeOriginationBytes(basic : {\n    source : string,\n    public_key: string\n  }, op_param : Object) {\n    return this.makeOperationBytes({\n      source: basic.source,\n      public_key: basic.public_key\n    }, [Object.assign({\n      kind: 'origination'\n    }, op_param)])\n  }\n\n  async makeTransactionBytes(basic : {\n    source : string,\n    public_key: string\n  }, op_param : Object) {\n    return this.makeOperationBytes({\n      source: basic.source,\n      public_key: basic.public_key\n    }, [Object.assign({\n      kind: 'transaction'\n    }, op_param)])\n  }\n}\n\nexport default { Gets, Posts, Mixed }","// @flow\nimport type { GetRPCFunc, PostRPCFunc, TezJSON } from './types'\n\nexport class External {\n  fetch: GetRPCFunc\n  net_type: 'mainnet' | 'alphanet'\n\n  constructor(fetch : GetRPCFunc, net_type : string) {\n    this.fetch = fetch\n    this.net_type = net_type === 'alphanet' ? net_type : 'mainnet'\n  }\n\n  domain() {\n    if (this.net_type === 'mainnet')\n      return 'https://api1.tzscan.io/v3'\n    else if (this.net_type === 'alphanet')\n      return 'https://api.alphanet.tzscan.io/v3'\n    else\n      throw 'The net type can only be mainnet or alphanet'\n  }\n\n  async spendable_contracts(address : string) {\n    const url = this.domain() + `/operations/${address}?type=Origination`\n    const operations  = await this.fetch(url)\n    const result = []\n    if (operations instanceof Array) \n      operations.forEach(op => {\n        op.type.operations.forEach(inner_op => {\n          if (inner_op.spendable)\n            result.push(inner_op.tz1.tz)\n        })\n      })\n    else\n      throw 'Operations is invalid'\n\n    return result\n  }\n\n}","// @flow\n\nconst RPCFn = (() => {\n  if (process.env.NODE_ENV === 'browser') {\n    return (url, data, method) => {\n      return new Promise<TezJSON>((resolve, reject) => {\n        const req = new XMLHttpRequest()\n        req.addEventListener('load', (pe: ProgressEvent) => {\n          if (req.status === 200)\n            resolve(JSON.parse(req.responseText))\n          else\n            reject(req.responseText)\n        })\n        req.addEventListener('error', reject)\n        req.addEventListener('abort', reject)\n        req.open(method, url)\n        if (method === 'POST') {\n          req.setRequestHeader('Content-Type', 'application/json')\n        }\n        req.send(JSON.stringify(data))\n      })\n    }\n  } else {\n    const https = require('https')\n    const url = require('url')\n    return (raw_url: string, data?: TezJSON, method: 'POST' | 'GET') => {\n      return new Promise<TezJSON>((resolve, reject) => {\n        const parsed_url = url.parse(raw_url)\n        const options = {\n          hostname: parsed_url.hostname,\n          port: parsed_url.port,\n          path: parsed_url.path,\n          method,\n          headers: raw_url.indexOf('tzscan.io/v3') > -1 ? {} : {\n            'Content-Type': 'application/json'\n          }\n        }\n\n        const req = https.request(options, (res) => {\n          let data = ''\n          res.on('data', (d) => {\n            data += d.toString()\n          })\n\n          res.on('end', () => {\n            try {\n              resolve(JSON.parse(data))\n            } catch(err) {\n              console.log('\\x1b[31m%s\\x1b[0m','RPC result JSON.parse error: ', data)\n            }\n          })\n        })\n\n        req.on('error', (e) => {\n          reject(e)\n        })\n\n        if (method === 'POST') {\n          req.write(JSON.stringify(data))\n        }\n\n        req.end()\n      })\n    }\n  }\n})()\n\nimport PsddFKi3_API from './PsddFKi3/api'\nimport { External } from './external'\nimport type { RPCFunc, TezJSON } from './types'\n\nconst APIs = {\n  PsddFKi3: PsddFKi3_API\n}\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc\n  net_type: 'mainnet' | 'alphanet'\n  fetch: PsddFKi3_API.Gets\n  submit: PsddFKi3_API.Posts\n  mixed: PsddFKi3_API.Mixed\n  external: External\n\n  constructor(params : {\n    host: string, \n    protocol?: string,\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = RPCFn\n    this.net_type = this.host.indexOf('alphanet') > -1 ? 'alphanet' : 'mainnet'\n\n    const protocol = params.protocol || 'PsddFKi3'\n\n    if (!(protocol in APIs)) {\n      throw `Protocol:${protocol} doesn't exist in protocols`\n    }\n\n    this.fetch = new APIs[protocol].Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new APIs[protocol].Posts((url, data) => this.post.call(this, url, data))\n    this.mixed = new APIs[protocol].Mixed(this.fetch, this.submit)\n    this.external = new External((url, data) => this.RPCFn(url, data, 'GET'), this.net_type)\n  }\n\n  switchProtocol(protocol : string) {\n    if (!(protocol in APIs)) {\n      throw `Protocol:${protocol} doesn't exist in protocols`\n    }\n    \n    this.fetch = new APIs[protocol].Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new APIs[protocol].Posts((url, data) => this.post.call(this, url, data))\n    this.mixed = new APIs[protocol].Mixed(this.fetch, this.submit)\n  }\n\n  get(url: string, data?: TezJSON) {\n    return this.RPCFn(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: TezJSON) {\n    return this.RPCFn(this.host + url, data, 'POST')\n  }\n}\n\nexport default TezBridgeNetwork"]}