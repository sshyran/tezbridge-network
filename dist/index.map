{"version":3,"sources":["api.js","index.js"],"names":["gets","fetch","mapping","custom","path","head","sub_key","header","protocol","then","x","Object","TezBridgeNetwork","params","host","RPCFn","bindApi","gets_closure","url","data","get","call","keys","forEach","key","args","apply","method","Promise","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify"],"mappings":";AAIO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAAA,IAAMA,EAAqB,SAACC,GAC3BC,IAAAA,EAAgD,CACpDC,OAAOC,SAAAA,GACEH,OAAAA,EAAMG,IAEfC,KAAKC,SAAAA,GACIL,OAAAA,EAAkCK,4BAAAA,OAAAA,GAAW,MAEtDC,OAAS,WACAL,OAAAA,EAAQG,KAAK,WAEtBG,SAAW,WACFN,OAAAA,EAAQK,SAASE,KAAK,SAAAC,GAAKA,OAAAA,aAAaC,QAAUD,EAAEF,aAIxDN,OAAAA,GAhBF,QAAA,KAAA;;AC2DQU,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,QAAAA,QAAAA,sBAAAA,EA5Df,IAAA,EAAA,QAAA,SA4DeA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,OAAAA,eAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EA1DFA,IAAAA,EA0DEA,WAlCDC,SAAAA,EAAAA,GAIN,GADH,EAAA,KAAA,IACIA,EAAOC,KACV,KAAM,gCAEHA,KAAAA,KAAOD,EAAOC,KACdC,KAAAA,MAAQF,EAAOE,OAAS,KAExBC,KAAAA,QAAQhB,EAAb,MAwBWY,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,UArBLZ,MAAAA,SAAAA,GAAoB,IAAA,EAAA,KACrBC,KAAAA,MAAQ,GACPgB,IAAAA,EAAejB,EAAK,SAACkB,EAAKC,GAAS,OAAA,EAAKC,IAAIC,KAAK,EAAMH,EAAKC,KAElER,OAAOW,KAAKL,GAAcM,QAAQ,SAAAC,GAChC,EAAKvB,MAAMuB,GAAO,WAAIC,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,GAAA,UAAA,GACtBR,OAAAA,EAAaO,GAAKE,MAAM,KAAMD,QAe9Bb,CAAAA,IAAAA,MAVTM,MAAAA,SAAAA,EAAaC,GACR,OAAC,KAAKJ,OAASH,EAAiBG,OAAO,KAAKD,KAAOI,EAAKC,EAAM,SAS1DP,CAAAA,IAAAA,OANRM,MAAAA,SAAAA,EAAaC,GACT,OAAC,KAAKJ,OAASH,EAAiBG,OAAO,KAAKD,KAAOI,EAAKC,EAAM,YAK1DP,EAAAA,GAAAA,QAAAA,iBAAAA,EA1DFA,EAAAA,EAKc,QAAA,SAACM,EAAKC,EAAMQ,GAC5B,OAAA,IAAIC,QAAiB,SAACC,EAASC,GAC9BC,IAAAA,EAAM,IAAIC,eAChBD,EAAIE,iBAAiB,OAAQ,SAACC,GACT,MAAfH,EAAII,OACNN,EAAQO,KAAKC,MAAMN,EAAIO,eAEvBR,EAAOC,EAAIO,gBAEfP,EAAIE,iBAAiB,QAASH,GAC9BC,EAAIE,iBAAiB,QAASH,GAC9BC,EAAIQ,KAAKZ,EAAQT,GACF,SAAXS,GACFI,EAAIS,iBAAiB,eAAgB,oBAEvCT,EAAIU,KAAKL,KAAKM,UAAUvB,QAsCfP,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nimport type { GetRPCFunc, TezJSON, ApiGetsFunc } from './types'\n\nexport const gets : ApiGetsFunc = (fetch : GetRPCFunc) => {\n  const mapping : {[string]: any => Promise<TezJSON>} = {\n    custom(path : string) {\n      return fetch(path)\n    },\n    head(sub_key? : string) {\n      return fetch(`/chains/main/blocks/head/${sub_key || ''}`)\n    },\n    header() {\n      return mapping.head('header')\n    },\n    protocol() {\n      return mapping.header().then(x => x instanceof Object && x.protocol)\n    }\n  }\n\n  return mapping\n}","// @flow\n\nimport type { RPCFunc, TezJSON, ApiGetsFunc } from './types'\nimport { gets } from './api'\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc | null\n  fetch: {[string]: any => Promise<TezJSON>}\n\n  static RPCFn : RPCFunc = (url, data, method) => {\n    return new Promise<TezJSON>((resolve, reject) => {\n      const req = new XMLHttpRequest()\n      req.addEventListener('load', (pe: ProgressEvent) => {\n        if (req.status === 200)\n          resolve(JSON.parse(req.responseText))\n        else\n          reject(req.responseText)\n      })\n      req.addEventListener('error', reject)\n      req.addEventListener('abort', reject)\n      req.open(method, url)\n      if (method === 'POST') {\n        req.setRequestHeader('Content-Type', 'application/json')\n      }\n      req.send(JSON.stringify(data))\n    })\n  }\n  \n  constructor(params : {\n    host: string, \n    RPCFn?: RPCFunc\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = params.RPCFn || null\n\n    this.bindApi(gets)\n  }\n\n  bindApi(gets : ApiGetsFunc) {\n    this.fetch = {}\n    const gets_closure = gets((url, data) => this.get.call(this, url, data))\n\n    Object.keys(gets_closure).forEach(key => {\n      this.fetch[key] = (...args) => {\n        return gets_closure[key].apply(null, args)\n      }\n    })\n  }\n\n  get(url: string, data?: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'POST')\n  }\n\n}\n\nexport default TezBridgeNetwork"]}