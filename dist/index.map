{"version":3,"sources":["types.js","api.js","index.js"],"names":["safeProp","x","props","result","prop","undefined","curr","shift","Object","Array","prop_index","parseInt","isNaN","Gets","fetch","path","sub_key","head","header","then","address","Posts","submit","data_json","type_json","param","TezBridgeNetwork","params","host","RPCFn","url","data","get","call","post","method","Promise","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nexport type TezJSON =\n| number\n| string\n| boolean\n| void\n| {[string]: TezJSON}\n| Array<TezJSON>\n\nexport function safeProp(x : TezJSON, ...props : Array<string | number>) {\n  let result = undefined\n\n  let prop\n  let curr = x\n  while (true) {\n    prop = props.shift()\n    if (prop === undefined)\n      break\n\n    if (curr instanceof Object && !(curr instanceof Array)) {\n      result = curr[prop]\n      curr = curr[prop]\n    } else if (curr instanceof Array) {\n      const prop_index = parseInt(prop)\n      if (isNaN(prop_index))\n        return undefined\n\n      result = curr[prop_index]\n      curr = curr[prop_index]\n    } else {\n      return undefined\n    }\n  }\n\n  return result\n}\n\nexport type RPCFunc = (url: string, data?: TezJSON, method: 'POST' | 'GET') => Promise<TezJSON>\nexport type GetRPCFunc = (url: string, data?: TezJSON) => Promise<TezJSON>\nexport type PostRPCFunc = (url: string, data: TezJSON) => Promise<TezJSON>\n","// @flow\n\nimport type { GetRPCFunc, PostRPCFunc, TezJSON } from './types'\nimport { safeProp } from './types'\n\nexport class Gets {\n  fetch : GetRPCFunc\n\n  constructor(fetch : GetRPCFunc) {\n    this.fetch = fetch\n  }\n  custom(path : string) {\n    return this.fetch(path)\n  }\n  head(sub_key? : string) {\n    return this.fetch(`/chains/main/blocks/head/${sub_key || ''}`)\n  }\n  hash() {\n    return this.head('hash')\n  }\n  header() {\n    return this.head('header')\n  }\n  protocol() {\n    return this.header().then(x => safeProp(x, 'protocol'))\n  }\n  balance(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/delegates/${address}/balance`)\n  }\n  contract(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}`)\n  }\n  manager_key(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/manager_key`)\n           .then(x => safeProp(x, 'manager'))\n  }\n}\n\nexport class Posts {\n  submit : PostRPCFunc\n\n  constructor(submit : PostRPCFunc) {\n    this.submit = submit\n  }\n\n  pack_data(data_json : TezJSON, type_json : TezJSON) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.submit(`/chains/main/blocks/head/helpers/scripts/pack_data`, param).then(x => safeProp(x, 'packed'))\n  }\n}\n\n","// @flow\n\nimport type { RPCFunc, TezJSON } from './types'\nimport { Gets, Posts } from './api'\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc | null\n  fetch: Gets\n  submit: Posts\n\n  static RPCFn : RPCFunc = (url, data, method) => {\n    return new Promise<TezJSON>((resolve, reject) => {\n      const req = new XMLHttpRequest()\n      req.addEventListener('load', (pe: ProgressEvent) => {\n        if (req.status === 200)\n          resolve(JSON.parse(req.responseText))\n        else\n          reject(req.responseText)\n      })\n      req.addEventListener('error', reject)\n      req.addEventListener('abort', reject)\n      req.open(method, url)\n      if (method === 'POST') {\n        req.setRequestHeader('Content-Type', 'application/json')\n      }\n      req.send(JSON.stringify(data))\n    })\n  }\n  \n  constructor(params : {\n    host: string, \n    RPCFn?: RPCFunc\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = params.RPCFn || null\n\n    this.fetch = new Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new Posts((url, data) => this.post.call(this, url, data))\n  }\n\n\n  get(url: string, data?: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'POST')\n  }\n\n}\n\nexport default TezBridgeNetwork"]}