{"version":3,"sources":["index.js"],"names":["TezBridgeNetwork","params","host","RPCall","url","data","method","Promise","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify"],"mappings":";AAgDeA,aAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,OAAAA,eAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,QAAAA,QAAAA,sBAAAA,EA3CFA,IAAAA,EA2CEA,WAvCDC,SAAAA,EAAAA,GAIN,GADH,EAAA,KAAA,IACIA,EAAOC,KACV,KAAM,gCAEHA,KAAAA,KAAOD,EAAOC,KACdC,KAAAA,OAASF,EAAOE,QAAU,KA+BpBH,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,MATTI,MAAAA,SAAAA,EAAaC,GACR,OAAC,KAAKF,QAAUH,EAAiBG,QAAQ,KAAKD,KAAOE,EAAKC,EAAM,SAQ5DL,CAAAA,IAAAA,OALRI,MAAAA,SAAAA,EAAaC,GACT,OAAC,KAAKF,QAAUH,EAAiBG,QAAQ,KAAKD,KAAOE,EAAKC,EAAM,YAI5DL,EAAAA,GAAAA,QAAAA,iBAAAA,EA3CFA,EAAAA,EAemB,SAAA,SAACI,EAAKC,EAAMC,GACjC,OAAA,IAAIC,QAAkB,SAACC,EAASC,GAC/BC,IAAAA,EAAM,IAAIC,eAChBD,EAAIE,iBAAiB,OAAQ,SAACC,GACT,MAAfH,EAAII,OACNN,EAAQO,KAAKC,MAAMN,EAAIO,eAEvBR,EAAOC,EAAIO,gBAEfP,EAAIE,iBAAiB,QAASH,GAC9BC,EAAIE,iBAAiB,QAASH,GAC9BC,EAAIQ,KAAKZ,EAAQF,GACF,SAAXE,GACFI,EAAIS,iBAAiB,eAAgB,oBAEvCT,EAAIU,KAAKL,KAAKM,UAAUhB,QAafL,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nimport type { JSONType, RPCFuncType } from './types'\n\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCall: RPCFuncType | null\n\n  constructor(params : {\n    host: string, \n    RPCall?: RPCFuncType\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCall = params.RPCall || null\n  }\n\n  static RPCall : RPCFuncType = (url, data, method) => {\n    return new Promise<JSONType>((resolve, reject) => {\n      const req = new XMLHttpRequest()\n      req.addEventListener('load', (pe: ProgressEvent) => {\n        if (req.status === 200)\n          resolve(JSON.parse(req.responseText))\n        else\n          reject(req.responseText)\n      })\n      req.addEventListener('error', reject)\n      req.addEventListener('abort', reject)\n      req.open(method, url)\n      if (method === 'POST') {\n        req.setRequestHeader('Content-Type', 'application/json')\n      }\n      req.send(JSON.stringify(data))\n    })\n  }\n\n  get(url: string, data: JSONType) {\n    return (this.RPCall || TezBridgeNetwork.RPCall)(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: JSONType) {\n    return (this.RPCall || TezBridgeNetwork.RPCall)(this.host + url, data, 'POST')\n  }\n}\n\nexport default TezBridgeNetwork"]}