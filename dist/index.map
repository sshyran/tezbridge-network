{"version":3,"sources":["api.js","index.js"],"names":["gets","head","sub_key","TezBridgeNetwork","params","host","RPCFn","bindApi","fetch","Object","keys","forEach","key","args","get","apply","url","data","method","Promise","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify"],"mappings":";AAIO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAAA,IAAMA,EAAiC,CAC5CC,KAAKC,SAAAA,GACgCA,MAAAA,4BAAAA,OAAAA,GAAW,MAF3C,QAAA,KAAA;;ACyDQC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,QAAAA,QAAAA,sBAAAA,EA1Df,IAAA,EAAA,QAAA,SA0DeA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,OAAAA,eAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAxDFA,IAAAA,EAwDEA,WAhCDC,SAAAA,EAAAA,GAIN,GADH,EAAA,KAAA,IACIA,EAAOC,KACV,KAAM,gCAEHA,KAAAA,KAAOD,EAAOC,KACdC,KAAAA,MAAQF,EAAOE,OAAS,KAExBC,KAAAA,QAAQP,EAAb,MAsBWG,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,UAnBLH,MAAAA,SAAAA,GAA+B,IAAA,EAAA,KAChCQ,KAAAA,MAAQ,GACbC,OAAOC,KAAKV,GAAMW,QAAQ,SAAAC,GACxB,EAAKJ,MAAMI,GAAO,WAAIC,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,GAAA,UAAA,GACtB,OAAA,EAAKC,IAAId,EAAKY,GAAKG,MAAM,KAAMF,SAe/BV,CAAAA,IAAAA,MAVTa,MAAAA,SAAAA,EAAaC,GACR,OAAC,KAAKX,OAASH,EAAiBG,OAAO,KAAKD,KAAOW,EAAKC,EAAM,SAS1Dd,CAAAA,IAAAA,OANRa,MAAAA,SAAAA,EAAaC,GACT,OAAC,KAAKX,OAASH,EAAiBG,OAAO,KAAKD,KAAOW,EAAKC,EAAM,YAK1Dd,EAAAA,GAAAA,QAAAA,iBAAAA,EAxDFA,EAAAA,EAKc,QAAA,SAACa,EAAKC,EAAMC,GAC5B,OAAA,IAAIC,QAAc,SAACC,EAASC,GAC3BC,IAAAA,EAAM,IAAIC,eAChBD,EAAIE,iBAAiB,OAAQ,SAACC,GACT,MAAfH,EAAII,OACNN,EAAQO,KAAKC,MAAMN,EAAIO,eAEvBR,EAAOC,EAAIO,gBAEfP,EAAIE,iBAAiB,QAASH,GAC9BC,EAAIE,iBAAiB,QAASH,GAC9BC,EAAIQ,KAAKZ,EAAQF,GACF,SAAXE,GACFI,EAAIS,iBAAiB,eAAgB,oBAEvCT,EAAIU,KAAKL,KAAKM,UAAUhB,QAoCfd,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nimport type { ApiGetsFunc } from './types'\n\nexport const gets : {[string]: ApiGetsFunc} = {\n  head(sub_key? : string) {\n    return `/chains/main/blocks/head/${sub_key || ''}`\n  }\n}","// @flow\n\nimport type { RPCFunc, ApiGetsFunc } from './types'\nimport { gets } from './api'\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc | null\n  fetch: {[string]: any => Promise<JSON>}\n\n  static RPCFn : RPCFunc = (url, data, method) => {\n    return new Promise<JSON>((resolve, reject) => {\n      const req = new XMLHttpRequest()\n      req.addEventListener('load', (pe: ProgressEvent) => {\n        if (req.status === 200)\n          resolve(JSON.parse(req.responseText))\n        else\n          reject(req.responseText)\n      })\n      req.addEventListener('error', reject)\n      req.addEventListener('abort', reject)\n      req.open(method, url)\n      if (method === 'POST') {\n        req.setRequestHeader('Content-Type', 'application/json')\n      }\n      req.send(JSON.stringify(data))\n    })\n  }\n  \n  constructor(params : {\n    host: string, \n    RPCFn?: RPCFunc\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = params.RPCFn || null\n\n    this.bindApi(gets)\n  }\n\n  bindApi(gets: {[string]: ApiGetsFunc}) {\n    this.fetch = {}\n    Object.keys(gets).forEach(key => {\n      this.fetch[key] = (...args) => {\n        return this.get(gets[key].apply(null, args))\n      }\n    })\n  }\n\n  get(url: string, data?: JSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: JSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'POST')\n  }\n\n}\n\nexport default TezBridgeNetwork"]}