{"version":3,"sources":["types.js","api.js","index.js"],"names":["safeProp","x","props","result","prop","undefined","curr","shift","Object","Array","prop_index","parseInt","isNaN","Gets","filter_hash_url","indexOf","start","end","slice","length","constructor","fetch","custom","path","head","sub_path","hash","header","protocol","then","predecessor","balance","address","contract","contract_bytes","hash_url","storage_bytes","big_map_bytes","manager_key","counter","Posts","submit","pack_data","data_json","type_json","param","forge_operation","head_hash","ops","branch","contents","console","log","preapply_operation","signature","inject_operation","signed_op","Parameter","key","reveal","kind","source","fee","gas_limit","storage_limit","public_key","getPublicKey","transaction","amount","TezBridgeNetwork","params","host","RPCFn","url","data","get","call","post","method","Promise","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nexport type TezJSON =\n| number\n| string\n| boolean\n| void\n| {[string]: TezJSON}\n| Array<TezJSON>\n\nexport function safeProp(x : TezJSON, ...props : Array<string | number>) {\n  let result = undefined\n\n  let prop\n  let curr = x\n  while (true) {\n    prop = props.shift()\n    if (prop === undefined)\n      break\n\n    if (curr instanceof Object && !(curr instanceof Array)) {\n      result = curr[prop]\n      curr = curr[prop]\n    } else if (curr instanceof Array) {\n      const prop_index = parseInt(prop)\n      if (isNaN(prop_index))\n        return undefined\n\n      result = curr[prop_index]\n      curr = curr[prop_index]\n    } else {\n      return undefined\n    }\n  }\n\n  return result\n}\n\nexport type RPCFunc = (url: string, data?: TezJSON, method: 'POST' | 'GET') => Promise<TezJSON>\nexport type GetRPCFunc = (url: string, data?: TezJSON) => Promise<TezJSON>\nexport type PostRPCFunc = (url: string, data: TezJSON) => Promise<TezJSON>\n","// @flow\n\nimport type { GetRPCFunc, PostRPCFunc, TezJSON } from './types'\nimport { safeProp } from './types'\n\nexport class Gets {\n  fetch : GetRPCFunc\n  static filter_hash_url(x : string) {\n    if (x.indexOf('/') === -1)\n      throw \"The input hash_url should be in this format: `xx/xx/xx/xx/xx/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\"\n\n    const start = x[0] === '/' ? 1 : 0\n    const end = x.slice(-1) === '/' ? -1 : x.length\n\n    return x.slice(start, end)\n  }\n\n  constructor(fetch : GetRPCFunc) {\n    this.fetch = fetch\n  }\n  custom(path : string) {\n    return this.fetch(path)\n  }\n  head(sub_path? : string) {\n    return this.fetch(`/chains/main/blocks/head/${sub_path || ''}`)\n  }\n  hash() {\n    return this.head('hash')\n  }\n  header() {\n    return this.head('header')\n  }\n  protocol() {\n    return this.header().then(x => safeProp(x, 'protocol'))\n  }\n  predecessor() {\n    return this.header().then(x => safeProp(x, 'predecessor'))\n  }\n  balance(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/delegates/${address}/balance`)\n  }\n  contract(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}`)\n  }\n  contract_bytes(hash_url : string, sub_path? : string) {\n    const hash = Gets.filter_hash_url(hash_url)\n    return this.fetch(`/chains/main/blocks/head/context/raw/bytes/contracts/index/originated/${hash}${sub_path || ''}`)\n  }\n  storage_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/data/storage')\n  }\n  big_map_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/big_map')\n  }\n  manager_key(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/manager_key`)\n           .then(x => safeProp(x, 'manager'))\n  }\n  counter(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/counter`)\n  }\n\n}\n\nexport class Posts {\n  submit : PostRPCFunc\n\n  constructor(submit : PostRPCFunc) {\n    this.submit = submit\n  }\n\n  pack_data(data_json : TezJSON, type_json : TezJSON) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.submit(`/chains/main/blocks/head/helpers/scripts/pack_data`, param)\n               .then(x => safeProp(x, 'packed'))\n  }\n\n  forge_operation(head_hash : string, ops : TezJSON) {\n    const param = {\n      branch: head_hash,\n      contents: ops\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/forge/operations`, param)\n               .then(x => console.log(x))\n  }\n\n  preapply_operation(head_hash : string, ops : TezJSON, protocol : string, signature : string) {\n    const param = {\n      branch: head_hash,\n      contents: ops,\n      protocol,\n      signature\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/preapply/operations`, [param])\n               .then(x => console.log(x))\n  }\n\n  inject_operation(signed_op : string) {\n    return this.submit('/injection/operation', signed_op)\n               .then(x => console.log(x))\n  }\n}\n\n\ninterface Key {\n  name : string,\n  secret_key : Uint8Array,\n  pub_key : Uint8Array,\n  address : string,\n  getSecretKey() : string,\n  getPublicKey() : string\n}\n\nexport class Parameter {\n  key : Key\n\n  constructor(key : Key) {\n    if (!key)\n      throw 'Please input key in Parameter constructor'\n\n    this.key = key\n  }\n\n\n  reveal() {\n    return {\n      kind: \"reveal\",\n      source: this.key.address,\n      fee: \"1300\",\n      gas_limit: \"10000\",\n      storage_limit: \"0\",\n      public_key: this.key.getPublicKey()\n      // counter: $positive_bignum,\n    }\n  }\n\n  transaction() {\n    return {\n      kind: 'transaction',\n      source: this.key.address,\n      fee: \"400000\",\n      gas_limit: \"400000\",\n      storage_limit: \"60000\",\n      amount: \"0\"\n      // counter: $positive_bignum,\n      // destination: $contract_id,\n      // parameters?: $micheline.michelson_v1.expression\n    }\n  }\n}","// @flow\n\nimport type { RPCFunc, TezJSON } from './types'\nimport { Gets, Posts } from './api'\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc | null\n  fetch: Gets\n  submit: Posts\n\n  static RPCFn : RPCFunc = (url, data, method) => {\n    return new Promise<TezJSON>((resolve, reject) => {\n      const req = new XMLHttpRequest()\n      req.addEventListener('load', (pe: ProgressEvent) => {\n        if (req.status === 200)\n          resolve(JSON.parse(req.responseText))\n        else\n          reject(req.responseText)\n      })\n      req.addEventListener('error', reject)\n      req.addEventListener('abort', reject)\n      req.open(method, url)\n      if (method === 'POST') {\n        req.setRequestHeader('Content-Type', 'application/json')\n      }\n      req.send(JSON.stringify(data))\n    })\n  }\n  \n  constructor(params : {\n    host: string, \n    RPCFn?: RPCFunc\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = params.RPCFn || null\n\n    this.fetch = new Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new Posts((url, data) => this.post.call(this, url, data))\n  }\n\n\n  get(url: string, data?: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'POST')\n  }\n\n}\n\nexport default TezBridgeNetwork"]}