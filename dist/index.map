{"version":3,"sources":["types.js","util.js","api.js","index.js"],"names":["safeProp","x","props","result","prop","undefined","curr","shift","Object","Array","prop_index","parseInt","isNaN","checkProps","obj","cursor","OpStep","constructor","main_fn","next_nodes","run","args","apply","Promise","then","catch","err","Gets","filter_hash_url","indexOf","start","end","slice","length","fetch","custom","path","head","sub_path","hash","header","protocol","predecessor","balance","address","contract","contract_bytes","hash_url","storage_bytes","big_map_bytes","manager_key","counter","Posts","submit","pack_data","data_json","type_json","param","forge_operation","head_hash","ops","branch","contents","console","log","preapply_operation","signature","inject_operation","signed_op","Mixed","originate","key_hash","submit_param","assign","kind","fee","gas_limit","storage_limit","managerPubkey","toString","TezBridgeNetwork","params","host","RPCFn","url","data","get","call","post","mixed","method","resolve","reject","req","XMLHttpRequest","addEventListener","pe","status","JSON","parse","responseText","open","setRequestHeader","send","stringify"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nexport type TezJSON =\n| number\n| string\n| boolean\n| void\n| {[string]: TezJSON}\n| Array<TezJSON>\n\nexport function safeProp(x : TezJSON, ...props : Array<string | number>) {\n  let result = undefined\n\n  let prop\n  let curr = x\n  while (true) {\n    prop = props.shift()\n    if (prop === undefined)\n      break\n\n    if (curr instanceof Object && !(curr instanceof Array)) {\n      result = curr[prop]\n      curr = curr[prop]\n    } else if (curr instanceof Array) {\n      const prop_index = parseInt(prop)\n      if (isNaN(prop_index))\n        return undefined\n\n      result = curr[prop_index]\n      curr = curr[prop_index]\n    } else {\n      return undefined\n    }\n  }\n\n  return result\n}\n\nexport type RPCFunc = (url: string, data?: TezJSON, method: 'POST' | 'GET') => Promise<TezJSON>\nexport type GetRPCFunc = (url: string, data?: TezJSON) => Promise<TezJSON>\nexport type PostRPCFunc = (url: string, data: TezJSON) => Promise<TezJSON>\n","// @flow\n\nexport function checkProps(obj : Object, ...props : Array<string>) {\n  let prop = props.shift()\n  let cursor = obj\n  while (prop !== undefined) {\n    if (!(prop in cursor) || cursor[prop] === undefined)\n      throw `Property: ${prop} is not in the object`\n\n    prop = props.shift()\n    cursor = cursor[prop]\n  }\n}\n\nexport class OpStep {\n  main_fn: any => any\n  next_nodes: Array<OpStep>\n\n  constructor(main_fn : any => any, ...next_nodes : Array<OpStep>) {\n    this.main_fn = main_fn\n    this.next_nodes = next_nodes\n  }\n\n  run(...args : Array<any>) {\n    const result = this.main_fn.apply(this, args)\n    if (typeof result === 'boolean') {\n      if (result) \n        return this.next_nodes[0] && this.next_nodes[0].run()\n      else\n        return this.next_nodes[1] && this.next_nodes[1].run()\n    }\n\n    if (result instanceof Promise) {\n      return result.then(x => this.next_nodes[0] && this.next_nodes[0].run(x))\n      .catch(err => {\n        throw `OpStep error caught: ${err}`\n      })\n    }\n  }\n}","// @flow\n\nimport type { GetRPCFunc, PostRPCFunc, TezJSON } from './types'\nimport { safeProp } from './types'\nimport { checkProps, OpStep } from './util'\n\n\nexport class Gets {\n  fetch : GetRPCFunc\n  static filter_hash_url(x : string) {\n    if (x.indexOf('/') === -1)\n      throw \"The input hash_url should be in this format: `xx/xx/xx/xx/xx/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\"\n\n    const start = x[0] === '/' ? 1 : 0\n    const end = x.slice(-1) === '/' ? -1 : x.length\n\n    return x.slice(start, end)\n  }\n\n  constructor(fetch : GetRPCFunc) {\n    this.fetch = fetch\n  }\n  custom(path : string) {\n    return this.fetch(path)\n  }\n  head(sub_path? : string) {\n    return this.fetch(`/chains/main/blocks/head/${sub_path || ''}`)\n  }\n  hash() {\n    return this.head('hash')\n  }\n  header() {\n    return this.head('header')\n  }\n  protocol() {\n    return this.header().then(x => safeProp(x, 'protocol'))\n  }\n  predecessor() {\n    return this.header().then(x => safeProp(x, 'predecessor'))\n  }\n  balance(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/delegates/${address}/balance`)\n  }\n  contract(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}`)\n  }\n  contract_bytes(hash_url : string, sub_path? : string) {\n    const hash = Gets.filter_hash_url(hash_url)\n    return this.fetch(`/chains/main/blocks/head/context/raw/bytes/contracts/index/originated/${hash}${sub_path || ''}`)\n  }\n  storage_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/data/storage')\n  }\n  big_map_bytes(hash_url : string) {\n    return this.contract_bytes(hash_url, '/big_map')\n  }\n  manager_key(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/manager_key`)\n           .then(x => safeProp(x, 'manager'))\n  }\n  counter(address : string) {\n    return this.fetch(`/chains/main/blocks/head/context/contracts/${address}/counter`)\n  }\n\n}\n\nexport class Posts {\n  submit : PostRPCFunc\n\n  constructor(submit : PostRPCFunc) {\n    this.submit = submit\n  }\n\n  pack_data(data_json : TezJSON, type_json : TezJSON) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.submit(`/chains/main/blocks/head/helpers/scripts/pack_data`, param)\n               .then(x => safeProp(x, 'packed'))\n  }\n\n  forge_operation(head_hash : string, ops : TezJSON) {\n    const param = {\n      branch: head_hash,\n      contents: ops\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/forge/operations`, param)\n               .then(x => console.log(x))\n  }\n\n  preapply_operation(head_hash : string, ops : TezJSON, protocol : string, signature : string) {\n    const param = {\n      branch: head_hash,\n      contents: ops,\n      protocol,\n      signature\n    }\n    return this.submit(`/chains/main/blocks/head/helpers/preapply/operations`, [param])\n               .then(x => console.log(x))\n  }\n\n  inject_operation(signed_op : string) {\n    return this.submit('/injection/operation', signed_op)\n               .then(x => console.log(x))\n  }\n}\n\n\nexport class Mixed {\n  fetch: Gets\n  submit: Posts\n  constructor(fetch: Gets, submit: Posts) {\n    this.fetch = fetch\n    this.submit = submit\n  }\n\n  async originate(param: {\n    key_hash : string\n  }) {\n    const counter = await this.fetch.counter(param.key_hash)\n\n    const submit_param = Object.assign({}, {\n      kind: \"origination\",\n      // source: this.key_pair.public_key_hash,\n      fee: \"400000\",\n      // counter: $positive_bignum,\n      gas_limit: \"400000\",\n      storage_limit: \"60000\",\n      // managerPubkey: this.key_pair.public_key_hash,\n      balance: \"0\",\n      // \"spendable\"?: boolean,\n      // \"delegatable\"?: boolean,\n      // \"delegate\"?: $Signature.Public_key_hash,\n      // \"script\"?: $scripted.contracts\n    }, {\n      counter,\n      managerPubkey: param.key_hash\n    })\n\n    const head = await this.fetch.head()\n\n    if (!(typeof head === 'string'))\n      throw `Error type for head result: ${head.toString()}`\n\n    const forget_result = await this.submit.forge_operation(head, [submit_param])\n  }\n}","// @flow\n\nimport type { RPCFunc, TezJSON } from './types'\nimport { Gets, Posts, Mixed } from './api'\n\nexport class TezBridgeNetwork {\n  host: string\n  RPCFn: RPCFunc | null\n  fetch: Gets\n  submit: Posts\n  mixed: Mixed\n\n  static RPCFn : RPCFunc = (url, data, method) => {\n    return new Promise<TezJSON>((resolve, reject) => {\n      const req = new XMLHttpRequest()\n      req.addEventListener('load', (pe: ProgressEvent) => {\n        if (req.status === 200)\n          resolve(JSON.parse(req.responseText))\n        else\n          reject(req.responseText)\n      })\n      req.addEventListener('error', reject)\n      req.addEventListener('abort', reject)\n      req.open(method, url)\n      if (method === 'POST') {\n        req.setRequestHeader('Content-Type', 'application/json')\n      }\n      req.send(JSON.stringify(data))\n    })\n  }\n  \n  constructor(params : {\n    host: string, \n    RPCFn?: RPCFunc\n  }) {\n    if (!params.host)\n      throw \"Please set the host parameter\"\n\n    this.host = params.host\n    this.RPCFn = params.RPCFn || null\n\n    this.fetch = new Gets((url, data) => this.get.call(this, url, data))\n    this.submit = new Posts((url, data) => this.post.call(this, url, data))\n\n    this.mixed = new Mixed(this.fetch, this.submit)\n  }\n\n\n  get(url: string, data?: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'GET')\n  }\n\n  post(url: string, data: TezJSON) {\n    return (this.RPCFn || TezBridgeNetwork.RPCFn)(this.host + url, data, 'POST')\n  }\n}\n\nexport default TezBridgeNetwork"]}